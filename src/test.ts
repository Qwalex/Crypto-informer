import dotenv from 'dotenv';
import { ExchangeService } from './services/ExchangeService';
import { TechnicalAnalysisService } from './services/TechnicalAnalysisService';
import { PythonAnalysisService } from './services/PythonAnalysisService';
import { loadConfig, validateConfig } from './utils/config';

dotenv.config();

async function testComponents() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...\n');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const config = loadConfig();
    validateConfig(config);
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ...');
    const exchangeService = new ExchangeService();
    
    try {
      const btcPrice = await exchangeService.getCurrentPrice('BTC/USDT');
      console.log(`‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC/USDT: $${btcPrice}`);
      
      const ohlcvData = await exchangeService.fetchOHLCVData('BTC/USDT', '1h', 10);
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${ohlcvData.length} —Å–≤–µ—á–µ–π –¥–ª—è BTC/USDT\n`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ:', error);
      return;
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    const technicalService = new TechnicalAnalysisService();
    
    try {
      const data = await exchangeService.fetchOHLCVData('BTC/USDT', '1h', 50);
      const indicators = technicalService.calculateIndicators(data);
      
      const rsi = technicalService.getLatestRSI(indicators);
      const macd = technicalService.getLatestMACD(indicators);
      const bb = technicalService.getLatestBollingerBands(indicators);
      
      console.log(`‚úÖ RSI: ${rsi.toFixed(2)}`);
      console.log(`‚úÖ MACD: ${macd.macd.toFixed(4)}, Signal: ${macd.signal.toFixed(4)}`);
      console.log(`‚úÖ Bollinger Bands - Upper: ${bb.upper.toFixed(2)}, Lower: ${bb.lower.toFixed(2)}\n`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return;
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Python —Å–µ—Ä–≤–∏—Å
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python —Å–µ—Ä–≤–∏—Å–∞...');
    const pythonService = new PythonAnalysisService(config.pythonServiceUrl);
    
    try {
      const health = await pythonService.checkHealth();
      if (health) {
        console.log('‚úÖ Python —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω');
        
        const data = await exchangeService.fetchOHLCVData('BTC/USDT', '1h', 100);
        const analysis = await pythonService.analyzeWithARIMAGARCH(data, 'BTC/USDT');
        
        console.log(`‚úÖ ARIMA –ø—Ä–æ–≥–Ω–æ–∑: $${analysis.arima_forecast.toFixed(6)}`);
        console.log(`‚úÖ GARCH –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${(analysis.garch_volatility * 100).toFixed(2)}%\n`);
      } else {
        console.log('‚ö†Ô∏è Python —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ\n');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Python —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error instanceof Error ? error.message : error);
    }

    console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "npm start" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

testComponents().catch(error => {
  console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
