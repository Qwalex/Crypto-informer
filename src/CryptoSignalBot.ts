import schedule from 'node-schedule';
import { ExchangeService } from './services/ExchangeService';
import { TechnicalAnalysisService } from './services/TechnicalAnalysisService';
import { PythonAnalysisService } from './services/PythonAnalysisService';
import { TelegramService } from './services/TelegramService';
import { MarketAnalysisService } from './services/MarketAnalysisService';
import { BotConfig, MarketAnalysis, TradingSignal } from './types';

export class CryptoSignalBot {
  private config: BotConfig;
  private exchangeService!: ExchangeService;
  private technicalAnalysisService!: TechnicalAnalysisService;
  private pythonAnalysisService!: PythonAnalysisService;
  private telegramService!: TelegramService;
  private marketAnalysisService!: MarketAnalysisService;
  
  private isRunning: boolean = false;
  private lastSignals: Map<string, TradingSignal> = new Map();

  constructor(config: BotConfig) {
    this.config = config;
    this.initializeServices();
  }

  private initializeServices(): void {
    this.exchangeService = new ExchangeService();
    this.technicalAnalysisService = new TechnicalAnalysisService();
    this.pythonAnalysisService = new PythonAnalysisService(this.config.pythonServiceUrl);
    this.telegramService = new TelegramService(this.config.telegramToken, this.config.telegramChatId);
    
    this.marketAnalysisService = new MarketAnalysisService(
      this.exchangeService,
      this.technicalAnalysisService,
      this.pythonAnalysisService,
      this.telegramService
    );
  }

  async start(): Promise<void> {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Python —Å–µ—Ä–≤–∏—Å–∞
      const pythonServiceHealth = await this.pythonAnalysisService.checkHealth();
      if (!pythonServiceHealth) {
        console.warn('‚ö†Ô∏è Python —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ ARIMA/GARCH –∞–Ω–∞–ª–∏–∑–∞.');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.telegramService.sendMessage('ü§ñ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

      this.isRunning = true;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      await this.performAnalysis();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      this.scheduleAnalysis();

      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      throw error;
    }
  }
  private sendReportsScheduled = false; // –§–ª–∞–≥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

  private scheduleAnalysis(): void {
    // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    schedule.scheduleJob('*/30 * * * *', async () => {
      if (this.isRunning) {
        this.sendReportsScheduled = false; // –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤
        await this.performAnalysis();
      }
    });

    // –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    schedule.scheduleJob('0 */4 * * *', async () => {
      if (this.isRunning) {
        this.sendReportsScheduled = true; // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ—Ç—á–µ—Ç–æ–º
        await this.performAnalysis();
      }
    });

    console.log('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç');
    console.log('üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞');
  }

  private async performAnalysis(): Promise<void> {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...');      const analyses = await this.marketAnalysisService.analyzeMultiplePairs(this.config.analysisPairs);
      console.log(`üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analyses.length} –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä`);

      const signals = await this.marketAnalysisService.generateTradingSignals(analyses);
      console.log(`üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${signals.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
      if (this.sendReportsScheduled || this.lastSignals.size === 0) {
        await this.telegramService.sendAnalysisReport(analyses);
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤—Å–µ—Ö ${analyses.length} –ø–∞—Ä`);
      }

      // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const newSignals = this.filterNewSignals(signals);
      
      for (const signal of newSignals) {
        await this.telegramService.sendSignal(signal);
        this.lastSignals.set(signal.pair, signal);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
      }

      if (newSignals.length > 0) {
        console.log(`üì§ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${newSignals.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:', error);
      
      try {
        await this.telegramService.sendMessage(
          `‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        );
      } catch (telegramError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram:', telegramError);
      }
    }
  }

  private filterNewSignals(signals: TradingSignal[]): TradingSignal[] {
    return signals.filter(signal => {
      const lastSignal = this.lastSignals.get(signal.pair);
      
      // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –Ω–µ –±—ã–ª–æ
      if (!lastSignal) return true;
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
      if (lastSignal.signal !== signal.signal) return true;
      
      // –ï—Å–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>10%)
      if (Math.abs(lastSignal.confidence - signal.confidence) > 0.1) return true;
      
      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
      if (signal.timestamp - lastSignal.timestamp > 4 * 60 * 60 * 1000) return true;
      
      return false;
    });
  }
  async stop(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    
    this.isRunning = false;
    
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    schedule.gracefulShutdown();
    
    try {
      await this.telegramService.sendMessage('üõë –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
    }
    
    console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
  async runManualAnalysis(): Promise<void> {
    console.log('üîß –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    await this.performAnalysis();
  }
}
