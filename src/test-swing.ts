import dotenv from 'dotenv';
import { ExchangeService } from './services/ExchangeService';
import { TechnicalAnalysisService } from './services/TechnicalAnalysisService';
import { PythonAnalysisService } from './services/PythonAnalysisService';
import { TelegramService } from './services/TelegramService';
import { MarketAnalysisService } from './services/MarketAnalysisService';
import { loadConfig } from './utils/config';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function testSwingAlgorithms() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö swing –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...\n');
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    const config = loadConfig();
    const exchangeService = new ExchangeService();
    const technicalAnalysisService = new TechnicalAnalysisService();
    const pythonAnalysisService = new PythonAnalysisService();
    const telegramService = new TelegramService(config.telegramToken, config.telegramChatId);
    const marketAnalysisService = new MarketAnalysisService(
      exchangeService,
      technicalAnalysisService,
      pythonAnalysisService,
      telegramService
    );

    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã
    const testPairs = ['BTC/USDT', 'ETH/USDT', 'DOGE/USDT'];

    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä...');
    const analyses = await marketAnalysisService.analyzeMultiplePairs(testPairs);    
    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã swing –∞–Ω–∞–ª–∏–∑–∞:');
    console.log('='.repeat(50));

    for (const analysis of analyses) {
      console.log(`\nüéØ ${analysis.pair}:`);
      console.log(`  üí∞ –¶–µ–Ω–∞: $${analysis.currentPrice.toFixed(6)}`);
      console.log(`  üìä –°–∏–≥–Ω–∞–ª: ${analysis.signal}`);
      console.log(`  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%`);
      console.log(`  üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(analysis.probability * 100).toFixed(1)}%`);
      
      if (analysis.reasoning) {
        console.log(`  üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:`);
        analysis.reasoning.technical.forEach(reason => {
          console.log(`    ‚Ä¢ ${reason}`);
        });
        
        console.log(`  üìä –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:`);
        analysis.reasoning.fundamental.forEach(reason => {
          console.log(`    ‚Ä¢ ${reason}`);
        });
        
        console.log(`  ‚ö†Ô∏è –†–∏—Å–∫: ${analysis.reasoning.risk}`);
        console.log(`  ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: ${analysis.reasoning.timeframe}`);
      }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    console.log('\nüö® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...');
    const signals = await marketAnalysisService.generateTradingSignals(analyses);

    if (signals.length > 0) {
      console.log(`\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${signals.length} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:`);
      
      for (const signal of signals) {
        console.log(`\nüéØ ${signal.pair}: ${signal.signal}`);
        console.log(`  üí∞ –í—Ö–æ–¥: $${signal.swingTarget.entry.toFixed(6)}`);
        console.log(`  üõë Stop Loss: $${signal.swingTarget.stopLoss.toFixed(6)}`);
        console.log(`  üé™ Take Profit: $${signal.swingTarget.takeProfit.toFixed(6)}`);
        console.log(`  ‚è± –ü–µ—Ä–∏–æ–¥: ${signal.swingTarget.timeframe}`);
        console.log(`  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(signal.confidence * 100).toFixed(1)}%`);
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
      console.log('\nüì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram...');
      await telegramService.sendSignal(signals[0]);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');

    } else {
      console.log('\n‚ö™ –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (–≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã swing —Ç–æ—Ä–≥–æ–≤–ª–∏)');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    console.log('\nüìä –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É...');
    await telegramService.sendAnalysisReport(analyses);
    console.log('‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüí° –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
    console.log('  ‚úÖ –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑ (1h, 4h, 1d)');
    console.log('  ‚úÖ 5 —É—Ä–æ–≤–Ω–µ–π —Å–∏–≥–Ω–∞–ª–æ–≤ (STRONG_BUY, BUY, HOLD, SELL, STRONG_SELL)');
    console.log('  ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ');
    console.log('  ‚úÖ Swing —Ü–µ–ª–∏ —Å —É—Ä–æ–≤–Ω—è–º–∏ –≤—Ö–æ–¥–∞, stop loss –∏ take profit');
    console.log('  ‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫');
    console.log('  ‚úÖ Confluence –∞–Ω–∞–ª–∏–∑ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏');
    console.log('  ‚úÖ –°—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è swing —Ç–æ—Ä–≥–æ–≤–ª–∏ (1-7 –¥–Ω–µ–π)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testSwingAlgorithms().catch(console.error);
}

export { testSwingAlgorithms };
