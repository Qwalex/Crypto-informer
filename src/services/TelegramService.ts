import axios from 'axios';
import { TradingSignal, MarketAnalysis } from '../types';
import { TelegramFormatter } from '../templates/TelegramFormatter';
import { TelegramTemplates } from '../templates/TelegramTemplates';

export class TelegramService {
  private botToken: string;
  private chatId: string;

  constructor(botToken: string, chatId: string) {
    this.botToken = botToken;
    this.chatId = chatId;
  }

  async sendSignal(signal: TradingSignal): Promise<void> {
    const message = this.formatSignalMessage(signal);
    await this.sendMessage(message);
  }

  async sendMessage(message: string): Promise<void> {
    try {
      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;

      await axios.post(url, {
        chat_id: this.chatId,
        text: message,
        parse_mode: 'HTML',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
      throw error;
    }
  }

  async sendAnalysisReport(analyses: MarketAnalysis[]): Promise<void> {
    const messages = TelegramFormatter.formatAnalysisReport(analyses);
    
    for (let i = 0; i < messages.length; i++) {
      await this.sendMessage(messages[i]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
      if (i < messages.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  }

  private formatSignalMessage(signal: TradingSignal): string {
    const {
      pair,
      exchange,
      signal: action,
      price,
      probability,
      confidence,
      analysis,
      swingTarget,
    } = signal;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç–º–æ–¥–∑–∏
    const signalEmoji = TelegramTemplates.getSignalEmoji(action);
    const exchangeEmoji = TelegramTemplates.getExchangeEmoji(exchange);

    let message = `${signalEmoji} <b>SWING –°–ò–ì–ù–ê–õ</b>\n\n`;
    message += `üìä <b>–ü–∞—Ä–∞:</b> ${pair}\n`;
    message += `üè¶ <b>–ë–∏—Ä–∂–∞:</b> ${exchangeEmoji}\n`;
    message += `üö¶ <b>–°–∏–≥–Ω–∞–ª:</b> ${action}\n`;
    message += `üí∞ <b>–¶–µ–Ω–∞:</b> $${price.toFixed(6)}\n`;
    message += `üéØ <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:</b> ${(probability * 100).toFixed(1)}%\n`;
    message += `üí™ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> ${(confidence * 100).toFixed(1)}%\n\n`;    if (swingTarget) {
      message += `üéØ <b>–¶–µ–ª—å –¥–ª—è swing-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞:</b>\n`;
      message += `   üíµ –í—Ö–æ–¥: $${swingTarget.entry.toFixed(6)}\n`;
      message += `   üõë Stop Loss: $${swingTarget.stopLoss.toFixed(6)}\n`;
      message += `   üé™ Take Profit: $${swingTarget.takeProfit.toFixed(6)}\n`;
      message += `   üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${((swingTarget.takeProfit / price - 1) * 100).toFixed(2)}%\n`;
      message += `   ‚è∞ –ì–æ—Ä–∏–∑–æ–Ω—Ç: ${swingTarget.timeframe}\n\n`;
    }

    if (analysis) {
      message += `üìà <b>–ê–Ω–∞–ª–∏–∑:</b> ${analysis}\n\n`;
    }

    message += `‚è∞ ${new Date().toLocaleString('ru-RU')}`;

    return message.trim();
  }
}
