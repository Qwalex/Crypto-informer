import axios from 'axios';
import { TradingSignal, MarketAnalysis } from '../types';

export class TelegramService {
  private botToken: string;
  private chatId: string;

  constructor(botToken: string, chatId: string) {
    this.botToken = botToken;
    this.chatId = chatId;
  }

  async sendSignal(signal: TradingSignal): Promise<void> {
    const message = this.formatSignalMessage(signal);
    await this.sendMessage(message);
  }

  async sendMessage(message: string): Promise<void> {
    try {
      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;
      
      await axios.post(url, {
        chat_id: this.chatId,
        text: message,
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
      throw error;
    }
  }
  private formatSignalMessage(signal: TradingSignal): string {
    const { pair, signal: action, price, probability, confidence, analysis, swingTarget } = signal;
    
    // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    const getSignalEmoji = (signal: string) => {
      switch (signal) {
        case 'STRONG_BUY': return 'üöÄ';
        case 'BUY': return 'üü¢';
        case 'SELL': return 'üî¥';
        case 'STRONG_SELL': return 'üí•';
        default: return '‚ö™';
      }
    };

    const getSignalText = (signal: string) => {
      switch (signal) {
        case 'STRONG_BUY': return '–°–†–û–ß–ù–û –ö–£–ü–ò–¢–¨';
        case 'BUY': return '–ö–£–ü–ò–¢–¨';
        case 'SELL': return '–ü–†–û–î–ê–¢–¨';
        case 'STRONG_SELL': return '–°–†–û–ß–ù–û –ü–†–û–î–ê–¢–¨';
        default: return '–î–ï–†–ñ–ê–¢–¨';
      }
    };

    const emoji = getSignalEmoji(action);
    const actionText = getSignalText(action);
    
    let message = `${emoji} <b>SWING –°–ò–ì–ù–ê–õ</b>\n\n`;
    message += `üìä <b>–ü–∞—Ä–∞:</b> ${pair}\n`;
    message += `üéØ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> ${actionText}\n`;
    message += `üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> $${price.toFixed(6)}\n`;
    message += `üìà <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> ${(confidence * 100).toFixed(1)}%\n\n`;    // Swing —Ü–µ–ª–∏
    if (swingTarget && (action === 'STRONG_BUY' || action === 'BUY' || action === 'SELL' || action === 'STRONG_SELL')) {
      message += `üéØ <b>SWING –¶–ï–õ–ò:</b>\n`;
      message += `üìç –í—Ö–æ–¥: $${swingTarget.entry.toFixed(6)}\n`;
      message += `üõë Stop Loss: $${swingTarget.stopLoss.toFixed(6)}\n`;
      message += `üé™ Take Profit: $${swingTarget.takeProfit.toFixed(6)}\n`;
      message += `‚è± –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: ${swingTarget.timeframe}\n\n`;
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    if (analysis.reasoning?.technical?.length > 0) {
      message += `üîß <b>–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:</b>\n`;
      analysis.reasoning.technical.forEach(reason => {
        message += `‚Ä¢ ${reason}\n`;
      });
      message += '\n';
    }

    // –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    if (analysis.reasoning?.fundamental?.length > 0) {
      message += `üìä <b>–§–£–ù–î–ê–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:</b>\n`;
      analysis.reasoning.fundamental.forEach(reason => {
        message += `‚Ä¢ ${reason}\n`;
      });
      message += '\n';
    }

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
    if (analysis.reasoning?.risk) {
      const riskEmoji = analysis.reasoning.risk === '–í–´–°–û–ö–ò–ô' ? 'üî¥' : 
                       analysis.reasoning.risk === '–ù–ò–ó–ö–ò–ô' ? 'üü¢' : 'üü°';
      message += `‚ö†Ô∏è <b>–†–ò–°–ö:</b> ${riskEmoji} ${analysis.reasoning.risk}\n`;
    }

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    if (analysis.reasoning?.timeframe) {
      message += `‚è∞ <b>–ì–æ—Ä–∏–∑–æ–Ω—Ç:</b> ${analysis.reasoning.timeframe}\n`;
    }

    message += `\nüïê <b>–í—Ä–µ–º—è:</b> ${new Date(signal.timestamp).toLocaleString('ru-RU')}`;
    
    return message.trim();
  }

  async sendAnalysisReport(analyses: MarketAnalysis[]): Promise<void> {
    const message = this.formatAnalysisReport(analyses);
    await this.sendMessage(message);
  }  private formatAnalysisReport(analyses: MarketAnalysis[]): string {
    let message = 'üìä <b>SWING –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê</b>\n\n';
    
    // –ü–æ–¥—Å—á–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
    const signals = {
      STRONG_BUY: analyses.filter(a => a.signal === 'STRONG_BUY').length,
      BUY: analyses.filter(a => a.signal === 'BUY').length,
      HOLD: analyses.filter(a => a.signal === 'HOLD').length,
      SELL: analyses.filter(a => a.signal === 'SELL').length,
      STRONG_SELL: analyses.filter(a => a.signal === 'STRONG_SELL').length
    };

    message += `üìà <b>–°–í–û–î–ö–ê –°–ò–ì–ù–ê–õ–û–í:</b>\n`;
    if (signals.STRONG_BUY > 0) message += `üöÄ –°—Ä–æ—á–Ω–æ –∫—É–ø–∏—Ç—å: ${signals.STRONG_BUY}\n`;
    if (signals.BUY > 0) message += `üü¢ –ö—É–ø–∏—Ç—å: ${signals.BUY}\n`;
    if (signals.HOLD > 0) message += `‚ö™ –î–µ—Ä–∂–∞—Ç—å: ${signals.HOLD}\n`;
    if (signals.SELL > 0) message += `üî¥ –ü—Ä–æ–¥–∞—Ç—å: ${signals.SELL}\n`;
    if (signals.STRONG_SELL > 0) message += `üí• –°—Ä–æ—á–Ω–æ –ø—Ä–æ–¥–∞—Ç—å: ${signals.STRONG_SELL}\n`;
    message += '\n';

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ HOLD)
    const activeSignals = analyses.filter(a => a.signal !== 'HOLD');
    if (activeSignals.length > 0) {
      message += `üéØ <b>–ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´:</b>\n`;
      activeSignals.forEach((analysis) => {
        const emoji = analysis.signal === 'STRONG_BUY' ? 'üöÄ' : 
                     analysis.signal === 'BUY' ? 'üü¢' : 
                     analysis.signal === 'SELL' ? 'üî¥' : 'üí•';
        
        message += `${emoji} <b>${analysis.pair}</b> ‚Üí ${analysis.signal}\n`;
        message += `   üí∞ $${analysis.currentPrice.toFixed(6)}\n`;
        message += `   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%\n`;
        
        if (analysis.reasoning?.technical && analysis.reasoning.technical.length > 0) {
          message += `   üìä ${analysis.reasoning.technical[0]}\n`;
        }
        
        if (analysis.reasoning?.risk) {
          const riskEmoji = analysis.reasoning.risk === '–í–´–°–û–ö–ò–ô' ? 'üî¥' : 
                           analysis.reasoning.risk === '–ù–ò–ó–ö–ò–ô' ? 'üü¢' : 'üü°';
          message += `   ‚ö†Ô∏è –†–∏—Å–∫: ${riskEmoji} ${analysis.reasoning.risk}\n`;
        }
        message += '\n';
      });
    }    // –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä–∞–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ HOLD
    const holdSignals = analyses.filter(a => a.signal === 'HOLD');
    if (holdSignals.length > 0) {
      message += `‚ö™ <b>–ü–ê–†–´ –í –û–ñ–ò–î–ê–ù–ò–ò (HOLD):</b>\n`;
      holdSignals.forEach((analysis) => {
        message += `‚Ä¢ <b>${analysis.pair}</b> - $${analysis.currentPrice.toFixed(6)}\n`;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º confluence –∏ –æ–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        const confluenceValue = this.extractConfluenceValue(analysis);
        let confluenceExplanation = '';
        
        if (confluenceValue >= 3) {
          confluenceExplanation = 'üü¢ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≥–æ–≤–æ—Ä—è—Ç "–ü–û–ö–£–ü–ê–¢–¨" - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
        } else if (confluenceValue >= 1) {
          confluenceExplanation = 'üü° –°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä–æ—Å—Ç–∞ - –º–æ–∂–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–µ';
        } else if (confluenceValue === 0) {
          confluenceExplanation = '‚ö™ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å - –ø–æ–ª–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å';
        } else if (confluenceValue >= -2) {
          confluenceExplanation = 'üü° –°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–∞–¥–µ–Ω–∏—è - –ª—É—á—à–µ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å';
        } else {
          confluenceExplanation = 'üî¥ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≥–æ–≤–æ—Ä—è—Ç "–ü–†–û–î–ê–í–ê–¢–¨" - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
        }
        
        message += `  üìä ${confluenceExplanation}\n`;
        
        // –û–±—ä—è—Å–Ω—è–µ–º —Ä–∏—Å–∫ –ø–æ–Ω—è—Ç–Ω–æ
        if (analysis.reasoning?.risk) {
          let riskExplanation = '';
          if (analysis.reasoning.risk === '–í–´–°–û–ö–ò–ô') {
            riskExplanation = 'üî¥ –í–´–°–û–ö–ò–ô —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å - —Ü–µ–Ω–∞ —Å–∏–ª—å–Ω–æ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è';
          } else if (analysis.reasoning.risk === '–ù–ò–ó–ö–ò–ô') {
            riskExplanation = 'üü¢ –ù–ò–ó–ö–ò–ô —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å - —Ü–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞';
          } else {
            riskExplanation = 'üü° –£–ú–ï–†–ï–ù–ù–´–ô —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å - –æ–±—ã—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è';
          }
          message += `  ‚ö†Ô∏è ${riskExplanation}\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç
        message += `  üí° <b>–°–æ–≤–µ—Ç:</b> `;
        if (confluenceValue >= 1) {
          message += `–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–æ–∫—É–ø–∫–µ, –Ω–æ –∂–¥–∏—Ç–µ –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n`;
        } else if (confluenceValue <= -1) {
          message += `–ù–µ –ø–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–π—á–∞—Å, –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å\n`;
        } else {
          message += `–ü—Ä–æ—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ, —Ä—ã–Ω–æ–∫ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è\n`;
        }
        
        message += '\n';
      });
      
      message += `üí° <b>–ü–†–û–°–¢–´–ú–ò –°–õ–û–í–ê–ú–ò:</b>\n`;
      message += `‚ö™ <b>HOLD (–î–ï–†–ñ–ê–¢–¨)</b> = –°–µ–π—á–∞—Å –ù–ï –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å\n`;
      message += `üìä –ñ–¥–µ–º, –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –ø–æ–∫–∞–∂–µ—Ç —á–µ—Ç–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n`;
      message += `üéØ –î–ª—è swing-—Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω—É–∂–Ω—ã —Å–∏–ª—å–Ω—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n\n`;
    }

    // –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    const avgConfidence = analyses.reduce((sum, a) => sum + a.confidence, 0) / analyses.length;
    const bullishSignals = signals.STRONG_BUY + signals.BUY;
    const bearishSignals = signals.STRONG_SELL + signals.SELL;
    
    message += `üå°Ô∏è <b>–†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø:</b>\n`;
    if (bullishSignals > bearishSignals) {
      message += `üìà –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –±—ã—á—å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n`;
    } else if (bearishSignals > bullishSignals) {
      message += `üìâ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –º–µ–¥–≤–µ–∂—å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n`;
    } else {
      message += `‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫\n`;
    }
    message += `üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(avgConfidence * 100).toFixed(1)}%\n\n`;

    message += `‚è∞ ${new Date().toLocaleString('ru-RU')}`;
    return message;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è confluence
  private extractConfluenceValue(analysis: any): number {
    if (analysis.reasoning?.technical) {
      for (const reason of analysis.reasoning.technical) {
        const match = reason.match(/confluence:\s*([+-]?\d+)/);
        if (match) {
          return parseInt(match[1]);
        }
      }
    }
    return 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  }
}
