import * as ccxt from 'ccxt';
import { OHLCVData } from '../types';

export class ExchangeService {
  private exchanges: Map<string, ccxt.Exchange> = new Map();
  private currentExchange: string = 'bybit'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

  constructor(selectedExchanges?: string[]) {
    this.initializeExchanges(selectedExchanges || ['bybit']);
  }  private initializeExchanges(selectedExchanges: string[]): void {
    console.log(`üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂: ${selectedExchanges.join(', ')}`);
    
    for (const exchangeName of selectedExchanges) {
      try {
        let exchange: ccxt.Exchange;
        
        // –°–æ–∑–¥–∞–µ–º –±–∏—Ä–∂–∏ –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        switch (exchangeName.toLowerCase()) {
          case 'bybit':
            exchange = new ccxt.bybit({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
            
          case 'binance':
            exchange = new ccxt.binance({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
            
          case 'okx':
            exchange = new ccxt.okx({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
            
          case 'kraken':
            exchange = new ccxt.kraken({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
            
          case 'kucoin':
            exchange = new ccxt.kucoin({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
            
          case 'bitget':
            exchange = new ccxt.bitget({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
            
          case 'gate':
            exchange = new ccxt.gate({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
            
          case 'mexc':
            exchange = new ccxt.mexc({
              sandbox: false,
              enableRateLimit: true,
            });
            break;
              default:
            console.warn(`‚ö†Ô∏è –ë–∏—Ä–∂–∞ ${exchangeName} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥`);
            // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–∏—Ä–∂ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            if ((ccxt as any)[exchangeName.toLowerCase()]) {
              exchange = new (ccxt as any)[exchangeName.toLowerCase()]({
                sandbox: false,
                enableRateLimit: true,
              });
            } else {
              console.warn(`‚ö†Ô∏è –ë–∏—Ä–∂–∞ ${exchangeName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ccxt, –∏—Å–ø–æ–ª—å–∑—É–µ–º Bybit`);
              exchange = new ccxt.bybit({
                sandbox: false,
                enableRateLimit: true,
              });
            }
        }
        
        this.exchanges.set(exchangeName.toLowerCase(), exchange);
        console.log(`‚úÖ –ë–∏—Ä–∂–∞ ${exchangeName} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏ ${exchangeName}:`, error);
        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –±–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º Bybit –∫–∞–∫ fallback
        if (exchangeName.toLowerCase() === 'bybit') {
          throw error;
        }
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∏—Ä–∂—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é
    if (this.exchanges.size > 0) {
      this.currentExchange = Array.from(this.exchanges.keys())[0];
      console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –±–∏—Ä–∂–∞: ${this.currentExchange}`);
    } else {
      throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏');
    }
  }

  getExchangeName(): string {
    const exchange = this.exchanges.get(this.currentExchange);
    return exchange?.name || this.currentExchange.charAt(0).toUpperCase() + this.currentExchange.slice(1);
  }

  setCurrentExchange(exchangeName: string): boolean {
    const normalizedName = exchangeName.toLowerCase();
    if (this.exchanges.has(normalizedName)) {
      this.currentExchange = normalizedName;
      return true;
    }
    return false;
  }

  getCurrentExchange(): string {
    return this.currentExchange;
  }

  getAvailableExchanges(): string[] {
    return Array.from(this.exchanges.keys());
  }

  async fetchOHLCVData(
    symbol: string, 
    timeframe: string = '1h', 
    limit: number = 100,
    exchangeName?: string
  ): Promise<OHLCVData[]> {
    const targetExchange = exchangeName || this.currentExchange;
    const exchange = this.exchanges.get(targetExchange);
    
    if (!exchange) {
      throw new Error(`–ë–∏—Ä–∂–∞ ${targetExchange} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
    }

    try {
      const ohlcv = await exchange.fetchOHLCV(symbol, timeframe, undefined, limit);
      
      return ohlcv.map((item: any) => ({
        timestamp: item[0],
        open: item[1],
        high: item[2],
        low: item[3],
        close: item[4],
        volume: item[5]
      }));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol} –Ω–∞ ${targetExchange}:`, error);
      throw error;
    }
  }

  async getCurrentPrice(symbol: string, exchangeName?: string): Promise<number> {
    const targetExchange = exchangeName || this.currentExchange;
    const exchange = this.exchanges.get(targetExchange);
    
    if (!exchange) {
      throw new Error(`–ë–∏—Ä–∂–∞ ${targetExchange} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
    }

    try {
      const ticker = await exchange.fetchTicker(symbol);
      return Number(ticker.last || ticker.close || 0);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è ${symbol} –Ω–∞ ${targetExchange}:`, error);
      throw error;
    }
  }

  async getMarketInfo(symbol: string, exchangeName?: string) {
    const targetExchange = exchangeName || this.currentExchange;
    const exchange = this.exchanges.get(targetExchange);
    
    if (!exchange) {
      throw new Error(`–ë–∏—Ä–∂–∞ ${targetExchange} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
    }

    try {
      const ticker = await exchange.fetchTicker(symbol);
      
      return {
        symbol,
        price: Number(ticker.last || ticker.close || 0),
        change24h: Number(ticker.percentage || 0),
        volume24h: Number(ticker.baseVolume || 0),
        high24h: Number(ticker.high || 0),
        low24h: Number(ticker.low || 0),
        exchange: targetExchange
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ –¥–ª—è ${symbol} –Ω–∞ ${targetExchange}:`, error);
      throw error;
    }
  }
}
