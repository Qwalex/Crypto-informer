import express, { Request, Response } from 'express';
import cors from 'cors';
import { CacheService, CachedData } from './CacheService';

export class ApiService {
  private app: express.Application;
  private cacheService: CacheService;
  private port: number;
  private server: any;

  constructor(cacheService: CacheService, port: number = 3001) {
    this.app = express();
    this.cacheService = cacheService;
    this.port = port;
    
    this.setupMiddleware();
    this.setupRoutes();
  }

  private setupMiddleware(): void {
    this.app.use(cors());
    this.app.use(express.json());
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.app.use((req, res, next) => {
      console.log(`üåê ${new Date().toISOString()} - ${req.method} ${req.path}`);
      next();
    });
  }

  private setupRoutes(): void {    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
    this.app.get('/', (req: Request, res: Response) => {
      res.json({
        name: 'Crypto Signal Bot API',
        version: '1.0.0',
        description: 'API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞',
        endpoints: {
          '/api/analysis': '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞',
          '/api/signals': '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã',
          '/api/market': '–û–±–∑–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
          '/api/pairs': '–ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º',
          '/api/status': '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
          '/api/cache': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ'
        },
        timestamp: new Date().toISOString()
      });
    });    // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    this.app.get('/api/analysis', (req: Request, res: Response) => {
      try {
        const data = this.cacheService.getAnalysisData();
        
        if (!data) {
          return res.status(404).json({
            error: '–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            message: '–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏'
          });
        }

        const responseData = {
          success: true,
          data: {
            analyses: data.analyses.map(analysis => ({
              pair: analysis.pair,
              signal: analysis.signal,
              confidence: Math.round(analysis.confidence * 100),
              probability: Math.round(analysis.probability * 100),
              currentPrice: analysis.currentPrice,
              reasoning: analysis.reasoning,
              timestamp: data.lastUpdate
            })),
            marketConditions: data.marketConditions,
            lastUpdate: new Date(data.lastUpdate).toISOString(),
            dataAge: Math.round((Date.now() - data.lastUpdate) / (1000 * 60)) // –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–∏–Ω—É—Ç–∞—Ö
          }
        };

        res.json(responseData);
      } catch (error) {
        res.status(500).json({
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞',
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    });    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    this.app.get('/api/signals', (req: Request, res: Response) => {
      try {
        const data = this.cacheService.getAnalysisData();
        
        if (!data) {
          return res.status(404).json({
            error: '–°–∏–≥–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            message: '–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏'
          });
        }

        const activeSignals = data.signals.map(signal => ({
          pair: signal.pair,
          signal: signal.signal,
          confidence: Math.round(signal.confidence * 100),
          price: signal.price,
          swingTarget: signal.swingTarget,
          timestamp: signal.timestamp
        }));

        res.json({
          success: true,
          data: {
            signals: activeSignals,
            count: activeSignals.length,
            lastUpdate: new Date(data.lastUpdate).toISOString()
          }
        });
      } catch (error) {
        res.status(500).json({
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤',
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    });    // –û–±–∑–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    this.app.get('/api/market', (req: Request, res: Response) => {
      try {
        const data = this.cacheService.getAnalysisData();
        
        if (!data) {
          return res.status(404).json({
            error: '–î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            message: '–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏'
          });
        }

        res.json({
          success: true,
          data: {
            ...data.marketConditions,
            averageConfidence: Math.round(data.marketConditions.averageConfidence * 100),
            activeSignals: data.signals.length,
            lastUpdate: new Date(data.lastUpdate).toISOString(),
            dataAge: Math.round((Date.now() - data.lastUpdate) / (1000 * 60))
          }
        });
      } catch (error) {
        res.status(500).json({
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞',
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    });    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
    this.app.get('/api/pairs/:symbol', (req: Request, res: Response) => {
      try {
        const symbol = req.params.symbol.toUpperCase();
        const data = this.cacheService.getAnalysisData();
        
        if (!data) {
          return res.status(404).json({
            error: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            message: '–ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏'
          });
        }

        const pairAnalysis = data.analyses.find(analysis => 
          analysis.pair.replace('/', '') === symbol || 
          analysis.pair === symbol
        );

        if (!pairAnalysis) {
          return res.status(404).json({
            error: '–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            message: `–ê–Ω–∞–ª–∏–∑ –¥–ª—è –ø–∞—Ä—ã ${symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
            availablePairs: data.analyses.map(a => a.pair)
          });
        }

        const pairSignal = data.signals.find(signal => 
          signal.pair.replace('/', '') === symbol || 
          signal.pair === symbol
        );

        res.json({
          success: true,
          data: {
            pair: pairAnalysis.pair,
            signal: pairAnalysis.signal,
            confidence: Math.round(pairAnalysis.confidence * 100),
            probability: Math.round(pairAnalysis.probability * 100),
            currentPrice: pairAnalysis.currentPrice,
            reasoning: pairAnalysis.reasoning,
            tradingSignal: pairSignal ? {
              signal: pairSignal.signal,
              swingTarget: pairSignal.swingTarget,
              timestamp: pairSignal.timestamp
            } : null,
            lastUpdate: new Date(data.lastUpdate).toISOString()
          }
        });
      } catch (error) {
        res.status(500).json({
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã',
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    });    // –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    this.app.get('/api/status', (req: Request, res: Response) => {
      try {
        const data = this.cacheService.getAnalysisData();
        const cacheStats = this.cacheService.getCacheStats();
        const lastUpdate = this.cacheService.getLastUpdateTime();
        const isFresh = this.cacheService.isDataFresh(30);

        res.json({
          success: true,
          data: {
            status: isFresh ? 'ACTIVE' : 'STALE',
            dataAvailable: !!data,
            lastUpdate: lastUpdate ? lastUpdate.toISOString() : null,
            dataAge: lastUpdate ? Math.round((Date.now() - lastUpdate.getTime()) / (1000 * 60)) : null,
            cache: cacheStats,
            uptime: Math.round(process.uptime()),
            memory: {
              used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
              total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024)
            }
          }
        });
      } catch (error) {
        res.status(500).json({
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    });    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ
    this.app.get('/api/cache', (req: Request, res: Response) => {
      try {
        const stats = this.cacheService.getCacheStats();
        const lastUpdate = this.cacheService.getLastUpdateTime();
        
        res.json({
          success: true,
          data: {
            stats,
            lastUpdate: lastUpdate ? lastUpdate.toISOString() : null,
            isFresh: this.cacheService.isDataFresh(30)
          }
        });
      } catch (error) {
        res.status(500).json({
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ',
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
    this.app.use('*', (req, res) => {
      res.status(404).json({
        error: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        message: `–ü—É—Ç—å ${req.originalUrl} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        availableEndpoints: [
          '/api/analysis',
          '/api/signals', 
          '/api/market',
          '/api/pairs/:symbol',
          '/api/status',
          '/api/cache'
        ]
      });
    });
  }
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  start(): Promise<void> {
    return new Promise((resolve) => {
      this.server = this.app.listen(this.port, () => {
        console.log(`üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
        console.log(`üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:${this.port}`);
        console.log(`üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: http://localhost:${this.port}/api/analysis`);
        console.log(`üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: http://localhost:${this.port}/api/signals`);
        console.log(`üìà –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞: http://localhost:${this.port}/api/market`);
        resolve();
      });
    });
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  stop(): Promise<void> {
    return new Promise((resolve) => {
      if (this.server) {
        this.server.close(() => {
          console.log('üåê API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          resolve();
        });
      } else {
        resolve();
      }
    });
  }
}
