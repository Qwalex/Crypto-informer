import { ExchangeService } from './ExchangeService';
import { TechnicalAnalysisService } from './TechnicalAnalysisService';
import { PythonAnalysisService } from './PythonAnalysisService';
import { TelegramService } from './TelegramService';
import { MarketAnalysis, TradingSignal, OHLCVData, TechnicalIndicators, PythonAnalysisResult } from '../types';

export class MarketAnalysisService {
  private exchangeService: ExchangeService;
  private technicalAnalysisService: TechnicalAnalysisService;
  private pythonAnalysisService: PythonAnalysisService;
  private telegramService: TelegramService;

  constructor(
    exchangeService: ExchangeService,
    technicalAnalysisService: TechnicalAnalysisService,
    pythonAnalysisService: PythonAnalysisService,
    telegramService: TelegramService
  ) {
    this.exchangeService = exchangeService;
    this.technicalAnalysisService = technicalAnalysisService;
    this.pythonAnalysisService = pythonAnalysisService;
    this.telegramService = telegramService;
  }

  async analyzePair(pair: string): Promise<MarketAnalysis> {
    try {
      console.log(`üìä Swing-–∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã: ${pair}`);      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
      const ohlcv1h = await this.exchangeService.fetchOHLCVData(pair, '1h', 200); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 200 –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const ohlcv4h = await this.exchangeService.fetchOHLCVData(pair, '4h', 50);
      const ohlcv1d = await this.exchangeService.fetchOHLCVData(pair, '1d', 30);
      const currentPrice = await this.exchangeService.getCurrentPrice(pair);

      // –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑
      const indicators1h = this.technicalAnalysisService.calculateIndicators(ohlcv1h);
      const indicators4h = this.technicalAnalysisService.calculateIndicators(ohlcv4h);
      const indicators1d = this.technicalAnalysisService.calculateIndicators(ohlcv1d);

      // –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç Python —Å–µ—Ä–≤–∏—Å–∞
      const forecast = await this.pythonAnalysisService.analyzeWithARIMAGARCH(ohlcv1h, pair);

      // Swing-–∞–Ω–∞–ª–∏–∑
      const swingAnalysis = this.performSwingAnalysis({
        indicators1h,
        indicators4h,
        indicators1d,
        forecast,
        currentPrice,
        ohlcvData: ohlcv1h
      });

      const signal = this.generateSwingSignal(swingAnalysis);      const reasoning = this.generateReasoning(swingAnalysis, signal);
      const swingTargets = this.calculateSwingTargets(currentPrice, indicators1d, signal);

      return {
        pair,
        exchange: this.exchangeService.getExchangeName(),
        probability: swingAnalysis.probability,
        indicators: indicators1h, // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        forecast,
        currentPrice,
        signal,
        confidence: swingAnalysis.confidence,
        reasoning
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ swing-–∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã ${pair}:`, error);
      throw error;
    }
  }

  async analyzeMultiplePairs(pairs: string[]): Promise<MarketAnalysis[]> {
    const analyses: MarketAnalysis[] = [];

    for (const pair of pairs) {
      try {
        const analysis = await this.analyzePair(pair);
        analyses.push(analysis);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã ${pair}:`, error);
        continue;
      }
    }

    return analyses;
  }

  async analyzeMultipleExchanges(pairs: string[]): Promise<MarketAnalysis[]> {
    const analyses: MarketAnalysis[] = [];
    const availableExchanges = this.exchangeService.getAvailableExchanges();

    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${pairs.length} –ø–∞—Ä –Ω–∞ ${availableExchanges.length} –±–∏—Ä–∂–∞—Ö...`);

    for (const exchangeName of availableExchanges) {
      console.log(`\nüè¶ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –±–∏—Ä–∂–µ: ${exchangeName.toUpperCase()}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∏—Ä–∂—É
      this.exchangeService.setCurrentExchange(exchangeName);
      
      for (const pair of pairs) {
        try {
          const analysis = await this.analyzePair(pair);
          analyses.push(analysis);
          
          console.log(`  ‚úÖ ${pair} (${exchangeName}) - ${analysis.signal}`);
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
          await new Promise(resolve => setTimeout(resolve, 2000));
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${pair} –Ω–∞ ${exchangeName}:`, error);
          continue;
        }
      }
    }

    console.log(`\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analyses.length} –ø–∞—Ä`);
    return analyses;
  }

  async generateTradingSignals(analyses: MarketAnalysis[]): Promise<TradingSignal[]> {
    const signals: TradingSignal[] = [];

    for (const analysis of analyses) {
      if (analysis.signal !== 'HOLD' && analysis.confidence > 0.65) { // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        const swingTargets = this.calculateSwingTargets(
          analysis.currentPrice, 
          analysis.indicators, 
          analysis.signal
        );

        signals.push({
          pair: analysis.pair,
          exchange: analysis.exchange,
          signal: analysis.signal,
          price: analysis.currentPrice,
          probability: analysis.probability,
          confidence: analysis.confidence,
          timestamp: Date.now(),
          analysis,
          swingTarget: swingTargets
        });
      }
    }

    return signals.sort((a, b) => b.confidence - a.confidence);
  }

  private performSwingAnalysis(data: {
    indicators1h: TechnicalIndicators;
    indicators4h: TechnicalIndicators;
    indicators1d: TechnicalIndicators;
    forecast: PythonAnalysisResult;
    currentPrice: number;
    ohlcvData: OHLCVData[];
  }): any {
    const { indicators1h, indicators4h, indicators1d, forecast, currentPrice, ohlcvData } = data;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    const rsi1h = indicators1h.rsi[indicators1h.rsi.length - 1];
    const rsi4h = indicators4h.rsi[indicators4h.rsi.length - 1];
    const rsi1d = indicators1d.rsi[indicators1d.rsi.length - 1];

    const macd1h = {
      macd: indicators1h.macd.macd[indicators1h.macd.macd.length - 1],
      signal: indicators1h.macd.signal[indicators1h.macd.signal.length - 1],
      histogram: indicators1h.macd.histogram[indicators1h.macd.histogram.length - 1]
    };

    const macd4h = {
      macd: indicators4h.macd.macd[indicators4h.macd.macd.length - 1],
      signal: indicators4h.macd.signal[indicators4h.macd.signal.length - 1],
      histogram: indicators4h.macd.histogram[indicators4h.macd.histogram.length - 1]
    };

    const bb1d = {
      upper: indicators1d.bollingerBands.upper[indicators1d.bollingerBands.upper.length - 1],
      middle: indicators1d.bollingerBands.middle[indicators1d.bollingerBands.middle.length - 1],
      lower: indicators1d.bollingerBands.lower[indicators1d.bollingerBands.lower.length - 1]
    };

    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const recentPrices = ohlcvData.slice(-168).map(d => d.close); // 7 –¥–Ω–µ–π * 24 —á–∞—Å–∞
    const trendStrength = this.calculateTrendStrength(recentPrices);
    const volatility = forecast.garch_volatility;
    const forecastDiff = (forecast.arima_forecast - currentPrice) / currentPrice * 100;

    // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ BB –∫–∞–Ω–∞–ª–µ
    const bbPosition = (currentPrice - bb1d.lower) / (bb1d.upper - bb1d.lower);

    // –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
    const rsiDivergence = Math.abs(rsi1h - rsi4h) + Math.abs(rsi4h - rsi1d);
    
    // Confluence (—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤)
    let confluence = 0;
    if (rsi1h < 30 && rsi4h < 35 && rsi1d < 40) confluence += 3; // –ë—ã—á—å—è confluence
    if (rsi1h > 70 && rsi4h > 65 && rsi1d > 60) confluence -= 3; // –ú–µ–¥–≤–µ–∂—å—è confluence
    
    if (macd1h.histogram > 0 && macd4h.histogram > 0) confluence += 2;
    if (macd1h.histogram < 0 && macd4h.histogram < 0) confluence -= 2;

    // –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è swing-—Ç–æ—Ä–≥–æ–≤–ª–∏
    let probability = 50; // –ë–∞–∑–æ–≤–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

    // –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º RSI
    if (rsi1d < 25) probability += 25;
    else if (rsi1d < 35) probability += 15;
    else if (rsi1d > 75) probability -= 25;
    else if (rsi1d > 65) probability -= 15;

    // MACD confluence
    if (confluence >= 3) probability += 20;
    else if (confluence <= -3) probability -= 20;

    // Bollinger Bands –ø–æ–∑–∏—Ü–∏—è
    if (bbPosition < 0.1) probability += 15;
    else if (bbPosition > 0.9) probability -= 15;

    // ARIMA –ø—Ä–æ–≥–Ω–æ–∑
    if (forecastDiff > 5) probability += 20;
    else if (forecastDiff < -5) probability -= 20;

    // –¢—Ä–µ–Ω–¥
    if (trendStrength > 0.7) probability += 10;
    else if (trendStrength < -0.7) probability -= 10;

    // –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    if (volatility > 2.0) probability -= 10; // –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    else if (volatility < 0.3) probability -= 5; // –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    probability = Math.max(0, Math.min(100, probability));

    // –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    let confidence = 0.5;
    if (Math.abs(confluence) >= 3) confidence += 0.2;
    if (rsiDivergence < 10) confidence += 0.1;
    if (volatility > 0.5 && volatility < 1.5) confidence += 0.1;
    if (Math.abs(forecastDiff) > 2) confidence += 0.1;

    confidence = Math.max(0, Math.min(1, confidence));

    return {
      probability: probability / 100, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
      confidence,
      rsi: { h1: rsi1h, h4: rsi4h, d1: rsi1d },
      macd: { h1: macd1h, h4: macd4h },
      bbPosition,
      trendStrength,
      volatility,
      forecastDiff,
      confluence,
      rsiDivergence
    };
  }
  private generateSwingSignal(analysis: any): 'STRONG_BUY' | 'BUY' | 'HOLD' | 'SELL' | 'STRONG_SELL' {
    const { probability, confidence, rsi, macd, bbPosition, trendStrength, volatility, forecastDiff, confluence } = analysis;

    // STRONG_BUY —É—Å–ª–æ–≤–∏—è (–æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ –¥–ª—è swing)
    if (
      probability >= 0.85 &&
      confidence >= 0.8 &&
      rsi.d1 < 25 &&
      rsi.h4 < 30 &&
      confluence >= 4 &&
      bbPosition < 0.15 &&
      forecastDiff > 5 &&
      volatility < 1.5
    ) {
      return 'STRONG_BUY';
    }

    // BUY —É—Å–ª–æ–≤–∏—è (—Å—Ç—Ä–æ–≥–∏–µ)
    if (
      probability >= 0.75 &&
      confidence >= 0.7 &&
      ((rsi.d1 < 35 && rsi.h4 < 40) || confluence >= 3) &&
      bbPosition < 0.3 &&
      forecastDiff > 2 &&
      volatility < 2.0
    ) {
      return 'BUY';
    }    // STRONG_SELL —É—Å–ª–æ–≤–∏—è (–æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ)
    if (
      probability <= 0.15 &&
      confidence >= 0.8 &&
      rsi.d1 > 75 &&
      rsi.h4 > 70 &&
      confluence <= -4 &&
      bbPosition > 0.85 &&
      forecastDiff < -5 &&
      volatility > 1.0
    ) {
      return 'STRONG_SELL';
    }

    // SELL —É—Å–ª–æ–≤–∏—è (—Å—Ç—Ä–æ–≥–∏–µ)
    if (
      probability <= 0.25 &&
      confidence >= 0.7 &&
      ((rsi.d1 > 65 && rsi.h4 > 60) || confluence <= -3) &&
      bbPosition > 0.7 &&
      forecastDiff < -2 &&
      volatility > 0.8
    ) {
      return 'SELL';
    }

    return 'HOLD';
  }

  private generateReasoning(analysis: any, signal: string): any {
    const { rsi, macd, bbPosition, trendStrength, volatility, forecastDiff, confluence } = analysis;
    
    const technical: string[] = [];
    const fundamental: string[] = [];
    let risk = '–£–ú–ï–†–ï–ù–ù–´–ô';

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    if (rsi.d1 < 30) {
      technical.push(`üìâ RSI –¥–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (${rsi.d1.toFixed(1)})`);
    } else if (rsi.d1 > 70) {
      technical.push(`üìà RSI –¥–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω (${rsi.d1.toFixed(1)})`);
    }

    if (confluence > 0) {
      technical.push(`‚úÖ –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º confluence: +${confluence}`);
    } else if (confluence < 0) {
      technical.push(`‚ùå –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º confluence: ${confluence}`);
    }

    if (bbPosition < 0.2) {
      technical.push(`üìä –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB –∫–∞–Ω–∞–ª–∞ (${(bbPosition * 100).toFixed(1)}%)`);
    } else if (bbPosition > 0.8) {
      technical.push(`üìä –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB –∫–∞–Ω–∞–ª–∞ (${(bbPosition * 100).toFixed(1)}%)`);
    }

    if (Math.abs(trendStrength) > 0.6) {
      technical.push(`üìà –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥: ${trendStrength > 0 ? '–≤–æ—Å—Ö–æ–¥—è—â–∏–π' : '–Ω–∏—Å—Ö–æ–¥—è—â–∏–π'} (${(trendStrength * 100).toFixed(1)}%)`);
    }

    // –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (Math.abs(forecastDiff) > 3) {
      fundamental.push(`üîÆ ARIMA –ø—Ä–æ–≥–Ω–æ–∑: ${forecastDiff > 0 ? '—Ä–æ—Å—Ç' : '–ø–∞–¥–µ–Ω–∏–µ'} –Ω–∞ ${Math.abs(forecastDiff).toFixed(1)}%`);
    }

    fundamental.push(`üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å GARCH: ${(volatility * 100).toFixed(1)}%`);

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
    if (signal.includes('STRONG')) {
      risk = volatility > 1.5 ? '–í–´–°–û–ö–ò–ô' : '–£–ú–ï–†–ï–ù–ù–´–ô';
    } else {
      risk = volatility > 2.0 ? '–í–´–°–û–ö–ò–ô' : volatility < 0.5 ? '–ù–ò–ó–ö–ò–ô' : '–£–ú–ï–†–ï–ù–ù–´–ô';
    }

    return {
      technical,
      fundamental,
      risk,
      timeframe: '1-7 –¥–Ω–µ–π (swing —Ç–æ—Ä–≥–æ–≤–ª—è)'
    };
  }

  private calculateSwingTargets(currentPrice: number, indicators: TechnicalIndicators, signal: string): any {
    const bb = {
      upper: indicators.bollingerBands.upper[indicators.bollingerBands.upper.length - 1],
      middle: indicators.bollingerBands.middle[indicators.bollingerBands.middle.length - 1],
      lower: indicators.bollingerBands.lower[indicators.bollingerBands.lower.length - 1]
    };

    const volatility = (bb.upper - bb.lower) / bb.middle;

    if (signal === 'STRONG_BUY' || signal === 'BUY') {
      return {
        entry: currentPrice,
        stopLoss: currentPrice * (1 - volatility * 0.5), // Stop loss –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        takeProfit: currentPrice * (1 + volatility * 1.5), // Take profit 3:1 risk/reward
        timeframe: '3-7 –¥–Ω–µ–π'
      };
    } else if (signal === 'STRONG_SELL' || signal === 'SELL') {
      return {
        entry: currentPrice,
        stopLoss: currentPrice * (1 + volatility * 0.5),
        takeProfit: currentPrice * (1 - volatility * 1.5),
        timeframe: '3-7 –¥–Ω–µ–π'
      };
    }

    return {
      entry: currentPrice,
      stopLoss: currentPrice,
      takeProfit: currentPrice,
      timeframe: '—É–¥–µ—Ä–∂–∞–Ω–∏–µ'
    };
  }
  private calculateTrendStrength(prices: number[]): number {
    if (prices.length < 168) return 0; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 168 —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    const recentPrices = prices.slice(-48); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤ (2 –¥–Ω—è)
    const oldPrices = prices.slice(-168, -120); // 5-7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
    if (recentPrices.length === 0 || oldPrices.length === 0) {
      return 0;
    }

    const recentAvg = recentPrices.reduce((a, b) => a + b, 0) / recentPrices.length;
    const oldAvg = oldPrices.reduce((a, b) => a + b, 0) / oldPrices.length;

    return oldAvg !== 0 ? (recentAvg - oldAvg) / oldAvg : 0;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  private calculateProbability(
    indicators: TechnicalIndicators, 
    forecast: PythonAnalysisResult, 
    currentPrice: number
  ): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return 0.5;
  }

  private calculateConfidence(
    indicators: TechnicalIndicators, 
    forecast: PythonAnalysisResult
  ): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return 0.7;
  }
}
