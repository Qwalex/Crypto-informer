import axios from 'axios';

export interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name: string;
      username?: string;
      type: string;
    };
    date: number;
    text: string;
  };
}

export interface ChatIdSearchResult {
  found: boolean;
  chatId?: string;
  username?: string;
  firstName?: string;
  error?: string;
}

export class TelegramHelperService {
  private botToken: string;

  constructor(botToken: string) {
    this.botToken = botToken;
  }

  // –ü–æ–∏—Å–∫ Chat ID –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
  async findChatId(): Promise<ChatIdSearchResult> {
    if (!this.botToken) {
      return { found: false, error: 'Bot Token –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const response = await axios.get(
        `https://api.telegram.org/bot${this.botToken}/getUpdates`,
        { 
          params: { limit: 10 },
          timeout: 5000 
        }
      );

      if (!response.data.ok) {
        return { found: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token' };
      }

      const updates: TelegramUpdate[] = response.data.result;
      
      if (updates.length === 0) {
        return { 
          found: false, 
          error: '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' 
        };
      }

      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const lastUpdate = updates[updates.length - 1];
      if (!lastUpdate.message) {
        return { 
          found: false, 
          error: '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' 
        };
      }

      return {
        found: true,
        chatId: lastUpdate.message.chat.id.toString(),
        username: lastUpdate.message.from.username,
        firstName: lastUpdate.message.from.first_name
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Chat ID:', error);
      
      if (axios.isAxiosError(error)) {
        if (error.code === 'ECONNABORTED') {
          return { found: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ' };
        }
        if (error.response?.status === 401) {
          return { found: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token' };
        }
        if (error.response?.status === 400) {
          return { found: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Bot Token' };
        }
      }

      return { 
        found: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  async sendTestMessage(chatId: string, message: string = 'ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –±–æ—Ç–∞!'): Promise<{ success: boolean; error?: string }> {
    if (!this.botToken || !chatId) {
      return { success: false, error: 'Bot Token –∏–ª–∏ Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω—ã' };
    }

    try {
      const response = await axios.post(
        `https://api.telegram.org/bot${this.botToken}/sendMessage`,
        {
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML'
        },
        { timeout: 5000 }
      );

      if (response.data.ok) {
        return { success: true };
      } else {
        return { success: false, error: response.data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      if (axios.isAxiosError(error)) {
        if (error.code === 'ECONNABORTED') {
          return { success: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è' };
        }
        if (error.response?.status === 403) {
          return { success: false, error: '–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π Chat ID' };
        }
        if (error.response?.status === 400) {
          return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Chat ID' };
        }
      }

      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Bot Token
  async validateBotToken(): Promise<{ valid: boolean; botInfo?: any; error?: string }> {
    if (!this.botToken) {
      return { valid: false, error: 'Bot Token –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    try {
      const response = await axios.get(
        `https://api.telegram.org/bot${this.botToken}/getMe`,
        { timeout: 5000 }
      );

      if (response.data.ok) {
        return { 
          valid: true, 
          botInfo: {
            id: response.data.result.id,
            username: response.data.result.username,
            first_name: response.data.result.first_name,
            can_join_groups: response.data.result.can_join_groups,
            can_read_all_group_messages: response.data.result.can_read_all_group_messages,
            supports_inline_queries: response.data.result.supports_inline_queries
          }
        };
      } else {
        return { valid: false, error: response.data.description || '–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token' };
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Bot Token:', error);
      
      if (axios.isAxiosError(error)) {
        if (error.code === 'ECONNABORTED') {
          return { valid: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è' };
        }
        if (error.response?.status === 401) {
          return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token' };
        }
      }

      return { 
        valid: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }
}
