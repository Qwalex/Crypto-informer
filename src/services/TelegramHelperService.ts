import axios from 'axios';

export interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name: string;
      username?: string;
      type: string;
    };
    date: number;
    text: string;
  };
}

export interface ChatIdSearchResult {
  found: boolean;
  chatId?: string;
  username?: string;
  firstName?: string;
  error?: string;
}

export class TelegramHelperService {
  constructor() {
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—É—Å—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ botToken –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –º–µ—Ç–æ–¥—ã
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Bot Token
  async validateBotToken(botToken: string): Promise<{ valid: boolean; botInfo?: any; error?: string }> {
    if (!botToken) {
      return { valid: false, error: 'Bot Token –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    try {
      const response = await axios.get(
        `https://api.telegram.org/bot${botToken}/getMe`,
        { timeout: 10000 }
      );

      if (response.data.ok) {
        return {
          valid: true,
          botInfo: response.data.result
        };
      } else {
        return {
          valid: false,
          error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Bot Token'
        };
      }
    } catch (error: any) {
      if (error.response?.status === 401) {
        return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token' };
      }
      return { 
        valid: false, 
        error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: ${error.message}` 
      };
    }
  }

  // –ü–æ–∏—Å–∫ Chat ID –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
  async findChatId(botToken: string): Promise<ChatIdSearchResult> {
    if (!botToken) {
      return { found: false, error: 'Bot Token –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const response = await axios.get(
        `https://api.telegram.org/bot${botToken}/getUpdates`,
        { 
          params: { limit: 10 },
          timeout: 10000 
        }
      );

      if (!response.data.ok) {
        return { found: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram' };
      }

      const updates: TelegramUpdate[] = response.data.result;

      if (updates.length === 0) {
        return { 
          found: false, 
          error: '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' 
        };
      }

      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç –±–æ—Ç–∞)
      const userMessage = updates
        .reverse()
        .find(update => 
          update.message && 
          !update.message.from.is_bot &&
          update.message.chat.type === 'private'
        );

      if (!userMessage?.message) {
        return { 
          found: false, 
          error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.' 
        };
      }

      return {
        found: true,
        chatId: userMessage.message.chat.id.toString(),
        username: userMessage.message.from.username,
        firstName: userMessage.message.from.first_name
      };

    } catch (error: any) {
      if (error.response?.status === 401) {
        return { found: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token' };
      }
      return { 
        found: false, 
        error: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Chat ID: ${error.message}` 
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendTestMessage(botToken: string, chatId: string, message: string = 'ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –±–æ—Ç–∞!'): Promise<{ success: boolean; error?: string }> {
    if (!botToken) {
      return { success: false, error: 'Bot Token –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    if (!chatId) {
      return { success: false, error: 'Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    try {
      const response = await axios.post(
        `https://api.telegram.org/bot${botToken}/sendMessage`,
        {
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown'
        },
        { timeout: 10000 }
      );

      if (response.data.ok) {
        return { success: true };
      } else {
        return { 
          success: false, 
          error: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
        };
      }
    } catch (error: any) {
      if (error.response?.status === 400) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Chat ID –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' };
      }
      if (error.response?.status === 401) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π Bot Token' };
      }
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}` 
      };
    }
  }
}