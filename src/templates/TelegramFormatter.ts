import { MarketAnalysis } from '../types';
import { TelegramTemplates } from './TelegramTemplates';

interface GroupedHoldSignals {
  [key: string]: {
    analyses: MarketAnalysis[];
    confluenceExplanation: string;
    advice: string;
  };
}

export class TelegramFormatter {
  private static readonly MAX_MESSAGE_LENGTH = 4000;

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è confluence
  private static extractConfluenceValue(analysis: MarketAnalysis): number {
    if (analysis.reasoning?.technical) {
      for (const reason of analysis.reasoning.technical) {
        const match = reason.match(/confluence:\s*([+-]?\d+)/);
        if (match) {
          return parseInt(match[1]);
        }
      }
    }
    return 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  }

  public static formatAnalysisReport(analyses: MarketAnalysis[]): string[] {
    const messages: string[] = [];
    
    // 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–≤–æ–¥–∫–∞
    let headerMessage = TelegramTemplates.formatHeader(analyses);
    headerMessage += TelegramTemplates.formatSignalsSummary(analyses);
    headerMessage += TelegramTemplates.formatMarketConditions(analyses);
    messages.push(headerMessage);

    // 2. –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    const activeSignals = analyses.filter(a => a.signal !== 'HOLD');
    if (activeSignals.length > 0) {
      const activeMessages = this.formatActiveSignals(activeSignals);
      messages.push(...activeMessages);
    }

    // 3. HOLD —Å–∏–≥–Ω–∞–ª—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    const holdSignals = analyses.filter(a => a.signal === 'HOLD');
    if (holdSignals.length > 0) {
      const holdMessages = this.formatOptimizedHoldSignals(holdSignals);
      messages.push(...holdMessages);
    }

    return messages;
  }

  private static formatActiveSignals(activeSignals: MarketAnalysis[]): string[] {
    const messages: string[] = [];
    let currentMessage = 'üéØ <b>–ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´:</b>\n';
    
    for (const analysis of activeSignals) {
      const signalText = TelegramTemplates.formatActiveSignal(analysis);
      
      if (currentMessage.length + signalText.length > this.MAX_MESSAGE_LENGTH) {
        messages.push(currentMessage);
        currentMessage = `üéØ <b>–ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n${signalText}`;
      } else {
        currentMessage += signalText;
      }
    }
    
    if (currentMessage.length > `üéØ <b>–ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n`.length) {
      messages.push(currentMessage);
    }

    return messages;
  }

  private static formatOptimizedHoldSignals(holdSignals: MarketAnalysis[]): string[] {
    const messages: string[] = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º HOLD —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É (confluence + —Ä–∏—Å–∫ + —Å–æ–≤–µ—Ç)
    const groupedSignals = this.groupHoldSignalsByStatus(holdSignals);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    let currentMessage = '‚ö™ <b>–ü–ê–†–´ –í –û–ñ–ò–î–ê–ù–ò–ò (HOLD) - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –û–¢–ß–ï–¢:</b>\n\n';
    
    const statusKeys = Object.keys(groupedSignals);
    for (let i = 0; i < statusKeys.length; i++) {
      const statusKey = statusKeys[i];
      const group = groupedSignals[statusKey];
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
      let groupText = `üìä <b>${group.confluenceExplanation}</b>\n`;
      groupText += `üí° <b>–°–æ–≤–µ—Ç:</b> ${group.advice}\n`;
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –≤ –≥—Ä—É–ø–ø–µ
      const pairCount = group.analyses.length;
      groupText += `üìà <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä:</b> ${pairCount}\n\n`;
      
      // –°–ø–∏—Å–æ–∫ –ø–∞—Ä (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É–º–º–∞—Ä–Ω–æ)
      const maxPairsToShow = 10;
      const pairsToShow = group.analyses.slice(0, maxPairsToShow);
      
      for (const analysis of pairsToShow) {
        const exchangeEmoji = TelegramTemplates.getExchangeEmoji(analysis.exchange);
        groupText += `‚Ä¢ <b>${analysis.pair}</b> (${exchangeEmoji}) - $${analysis.currentPrice.toFixed(6)}`;
        
        if (analysis.reasoning?.risk) {
          const riskEmoji = TelegramTemplates.getRiskEmoji(analysis.reasoning.risk);
          groupText += ` - –†–∏—Å–∫: ${riskEmoji}`;
        }
        groupText += '\n';
      }
      
      // –ï—Å–ª–∏ –ø–∞—Ä –±–æ–ª—å—à–µ 10, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
      if (group.analyses.length > maxPairsToShow) {
        const remaining = group.analyses.length - maxPairsToShow;
        groupText += `... –∏ –µ—â–µ ${remaining} –ø–∞—Ä —Å —Ç–∞–∫–∏–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º\n`;
      }
      
      groupText += '\n';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ª–∏–º–∏—Ç
      if (currentMessage.length + groupText.length > this.MAX_MESSAGE_LENGTH) {
        messages.push(currentMessage);
        currentMessage = `‚ö™ <b>–ü–ê–†–´ –í –û–ñ–ò–î–ê–ù–ò–ò (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n\n${groupText}`;
      } else {
        currentMessage += groupText;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
    const explanation = TelegramTemplates.formatHoldExplanation();
    if (currentMessage.length + explanation.length > this.MAX_MESSAGE_LENGTH) {
      messages.push(currentMessage);
      messages.push(explanation);
    } else {
      currentMessage += explanation;
      messages.push(currentMessage);
    }

    return messages;
  }

  private static groupHoldSignalsByStatus(holdSignals: MarketAnalysis[]): GroupedHoldSignals {
    const grouped: GroupedHoldSignals = {};
    
    for (const analysis of holdSignals) {
      const confluenceValue = this.extractConfluenceValue(analysis);
      const confluenceExplanation = TelegramTemplates.getConfluenceExplanation(confluenceValue);
      const advice = TelegramTemplates.getAdvice(confluenceValue);
      const risk = analysis.reasoning?.risk || '–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô';
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: confluence + —Ä–∏—Å–∫
      const statusKey = `${confluenceValue}_${risk}`;
      
      if (!grouped[statusKey]) {
        grouped[statusKey] = {
          analyses: [],
          confluenceExplanation,
          advice,
        };
      }
      
      grouped[statusKey].analyses.push(analysis);
    }
    
    return grouped;
  }
}
