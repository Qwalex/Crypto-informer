import { MarketAnalysis } from '../types';

export interface ExchangeEmoji {
  [key: string]: string;
}

export interface SignalEmoji {
  [key: string]: string;
}

export interface RiskEmoji {
  [key: string]: string;
}

export class TelegramTemplates {
  public static readonly EXCHANGE_EMOJIS: ExchangeEmoji = {
    'bybit': 'üüß BYBIT',
    'binance': 'üü® BINANCE',
    'okx': 'üü¶ OKX',
    'kraken': 'üü™ KRAKEN',
    'bitget': 'üü© BITGET',
  };

  public static readonly SIGNAL_EMOJIS: SignalEmoji = {
    'STRONG_BUY': 'üöÄ',
    'BUY': 'üü¢',
    'HOLD': '‚ö™',
    'SELL': 'üî¥',
    'STRONG_SELL': 'üí•',
  };

  public static readonly RISK_EMOJIS: RiskEmoji = {
    '–í–´–°–û–ö–ò–ô': 'üî¥',
    '–ù–ò–ó–ö–ò–ô': 'üü¢',
    '–£–ú–ï–†–ï–ù–ù–´–ô': 'üü°',
  };

  public static getExchangeEmoji(exchange: string): string {
    return this.EXCHANGE_EMOJIS[exchange.toLowerCase()] || `üîµ ${exchange.toUpperCase()}`;
  }

  public static getSignalEmoji(signal: string): string {
    return this.SIGNAL_EMOJIS[signal] || '‚ö™';
  }

  public static getRiskEmoji(risk: string): string {
    return this.RISK_EMOJIS[risk] || 'üü°';
  }

  public static formatHeader(analyses: MarketAnalysis[]): string {
    const exchanges = [...new Set(analyses.map(a => a.exchange))];
    const exchangeEmojis = exchanges.map(exchange => this.getExchangeEmoji(exchange));

    let header = 'üìä <b>SWING –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê</b>\n\n';
    header += `üè¶ <b>–ë–ò–†–ñ–ò:</b> ${exchangeEmojis.join(', ')}\n`;
    header += `üìà <b>–í–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä:</b> ${analyses.length}\n\n`;

    return header;
  }

  public static formatSignalsSummary(analyses: MarketAnalysis[]): string {
    const signals = {
      STRONG_BUY: analyses.filter(a => a.signal === 'STRONG_BUY').length,
      BUY: analyses.filter(a => a.signal === 'BUY').length,
      HOLD: analyses.filter(a => a.signal === 'HOLD').length,
      SELL: analyses.filter(a => a.signal === 'SELL').length,
      STRONG_SELL: analyses.filter(a => a.signal === 'STRONG_SELL').length,
    };

    let summary = 'üìà <b>–°–í–û–î–ö–ê –°–ò–ì–ù–ê–õ–û–í:</b>\n';
    if (signals.STRONG_BUY > 0) summary += `üöÄ –°—Ä–æ—á–Ω–æ –∫—É–ø–∏—Ç—å: ${signals.STRONG_BUY}\n`;
    if (signals.BUY > 0) summary += `üü¢ –ö—É–ø–∏—Ç—å: ${signals.BUY}\n`;
    if (signals.HOLD > 0) summary += `‚ö™ –î–µ—Ä–∂–∞—Ç—å: ${signals.HOLD}\n`;
    if (signals.SELL > 0) summary += `üî¥ –ü—Ä–æ–¥–∞—Ç—å: ${signals.SELL}\n`;
    if (signals.STRONG_SELL > 0) summary += `üí• –°—Ä–æ—á–Ω–æ –ø—Ä–æ–¥–∞—Ç—å: ${signals.STRONG_SELL}\n`;
    summary += '\n';

    return summary;
  }

  public static formatMarketConditions(analyses: MarketAnalysis[]): string {
    const avgConfidence = analyses.reduce((sum, a) => sum + a.confidence, 0) / analyses.length;
    const bullishSignals = analyses.filter(a => ['STRONG_BUY', 'BUY'].includes(a.signal)).length;
    const bearishSignals = analyses.filter(a => ['STRONG_SELL', 'SELL'].includes(a.signal)).length;

    let conditions = 'üå°Ô∏è <b>–†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø:</b>\n';
    if (bullishSignals > bearishSignals) {
      conditions += 'üìà –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –±—ã—á—å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n';
    } else if (bearishSignals > bullishSignals) {
      conditions += 'üìâ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –º–µ–¥–≤–µ–∂—å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n';
    } else {
      conditions += '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫\n';
    }
    conditions += `üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(avgConfidence * 100).toFixed(1)}%\n\n`;
    conditions += `‚è∞ ${new Date().toLocaleString('ru-RU')}\n\n`;

    return conditions;
  }

  public static formatActiveSignal(analysis: MarketAnalysis): string {
    const signalEmoji = this.getSignalEmoji(analysis.signal);
    const exchangeEmoji = this.getExchangeEmoji(analysis.exchange);

    let signal = `${signalEmoji} <b>${analysis.pair}</b> (${exchangeEmoji}) ‚Üí ${analysis.signal}\n`;
    signal += `   üí∞ $${analysis.currentPrice.toFixed(6)}\n`;
    signal += `   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%\n`;

    if (analysis.reasoning?.technical && analysis.reasoning.technical.length > 0) {
      signal += `   üìä ${analysis.reasoning.technical[0]}\n`;
    }

    if (analysis.reasoning?.risk) {
      const riskEmoji = this.getRiskEmoji(analysis.reasoning.risk);
      signal += `   ‚ö†Ô∏è –†–∏—Å–∫: ${riskEmoji} ${analysis.reasoning.risk}\n`;
    }
    signal += '\n';

    return signal;
  }

  public static getConfluenceExplanation(confluenceValue: number): string {
    if (confluenceValue >= 3) {
      return 'üü¢ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≥–æ–≤–æ—Ä—è—Ç "–ü–û–ö–£–ü–ê–¢–¨" - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    } else if (confluenceValue >= 1) {
      return 'üü° –°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä–æ—Å—Ç–∞ - –º–æ–∂–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–µ';
    } else if (confluenceValue === 0) {
      return '‚ö™ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å - –ø–æ–ª–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å';
    } else if (confluenceValue >= -2) {
      return 'üü° –°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–∞–¥–µ–Ω–∏—è - –ª—É—á—à–µ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å';
    } else {
      return 'üî¥ –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≥–æ–≤–æ—Ä—è—Ç "–ü–†–û–î–ê–í–ê–¢–¨" - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    }
  }

  public static getRiskExplanation(risk: string): string {
    if (risk === '–í–´–°–û–ö–ò–ô') {
      return 'üî¥ –í–´–°–û–ö–ò–ô —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å - —Ü–µ–Ω–∞ —Å–∏–ª—å–Ω–æ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è';
    } else if (risk === '–ù–ò–ó–ö–ò–ô') {
      return 'üü¢ –ù–ò–ó–ö–ò–ô —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å - —Ü–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞';
    } else {
      return 'üü° –£–ú–ï–†–ï–ù–ù–´–ô —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—å - –æ–±—ã—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è';
    }
  }

  public static getAdvice(confluenceValue: number): string {
    if (confluenceValue >= 1) {
      return '–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–æ–∫—É–ø–∫–µ, –Ω–æ –∂–¥–∏—Ç–µ –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤';
    } else if (confluenceValue <= -1) {
      return '–ù–µ –ø–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–π—á–∞—Å, –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å';
    } else {
      return '–ü—Ä–æ—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ, —Ä—ã–Ω–æ–∫ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è';
    }
  }

  public static formatHoldExplanation(): string {
    let explanation = 'üí° <b>–ü–†–û–°–¢–´–ú–ò –°–õ–û–í–ê–ú–ò:</b>\n';
    explanation += '‚ö™ <b>HOLD (–î–ï–†–ñ–ê–¢–¨)</b> = –°–µ–π—á–∞—Å –ù–ï –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å\n';
    explanation += 'üìä –ñ–¥–µ–º, –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –ø–æ–∫–∞–∂–µ—Ç —á–µ—Ç–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n';
    explanation += 'üéØ –î–ª—è swing-—Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω—É–∂–Ω—ã —Å–∏–ª—å–Ω—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n';
    return explanation;
  }
}
