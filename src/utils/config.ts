import { BotConfig } from '../types';
import * as fs from 'fs';
import * as path from 'path';

export function loadConfig(): BotConfig {
  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ bot-config.json
  const configPath = path.join(process.cwd(), 'bot-config.json');
  
  if (fs.existsSync(configPath)) {
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ bot-config.json...');
    
    try {
      const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        return {
        telegramToken: configData.telegramBotToken,
        telegramChatId: configData.telegramChatId,
        selectedExchanges: configData.selectedExchanges || ['bybit'],
        analysisInterval: configData.analysisInterval || '4h',
        analysisPairs: configData.analysisPairs || ['BTC/USDT', 'ETH/USDT'],
        pythonServiceUrl: process.env.PYTHON_SERVICE_URL || 'http://localhost:8000'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bot-config.json:', error);
      console.log('üìã –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    }
  }

  // Fallback –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const requiredEnvVars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHAT_ID'];
  
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envVar}`);
    }
  }

  const analysisPairs = (process.env.ANALYSIS_PAIRS || 'BTC/USDT,ETH/USDT,BNB/USDT,ADA/USDT,SOL/USDT')
    .split(',')
    .map(pair => pair.trim());

  const selectedExchanges = (process.env.SELECTED_EXCHANGES || 'bybit,binance')
    .split(',')
    .map(exchange => exchange.trim().toLowerCase());

  return {
    telegramToken: process.env.TELEGRAM_BOT_TOKEN!,
    telegramChatId: process.env.TELEGRAM_CHAT_ID!,
    selectedExchanges,
    analysisInterval: process.env.ANALYSIS_INTERVAL || '1h',
    analysisPairs,
    pythonServiceUrl: process.env.PYTHON_SERVICE_URL || 'http://localhost:8000'
  };
}

export function validateConfig(config: BotConfig): void {
  if (!config.telegramToken || config.telegramToken.trim() === '') {
    throw new Error('Telegram bot token –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  if (!config.telegramChatId || config.telegramChatId.trim() === '') {
    throw new Error('Telegram chat ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  if (config.analysisPairs.length === 0) {
    throw new Error('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
  }

  if (config.selectedExchanges.length === 0) {
    throw new Error('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±–∏—Ä–∂–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
  const pairRegex = /^[A-Z]{2,10}\/[A-Z]{2,10}$/;
  for (const pair of config.analysisPairs) {
    if (!pairRegex.test(pair)) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã: ${pair}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: BTC/USDT`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏
  const supportedExchanges = ['bybit', 'binance', 'okx', 'kraken', 'bitget'];
  for (const exchange of config.selectedExchanges) {
    if (!supportedExchanges.includes(exchange.toLowerCase())) {
      console.warn(`‚ö†Ô∏è –ë–∏—Ä–∂–∞ ${exchange} –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é`);
    }
  }
  
  console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
}
