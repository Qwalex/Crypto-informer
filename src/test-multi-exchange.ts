import { loadConfig } from './utils/config';
import { ExchangeService } from './services/ExchangeService';
import { MarketAnalysisService } from './services/MarketAnalysisService';
import { TechnicalAnalysisService } from './services/TechnicalAnalysisService';
import { PythonAnalysisService } from './services/PythonAnalysisService';
import { TelegramService } from './services/TelegramService';

async function testMultiExchange() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏ –±–µ–∑ API –∫–ª—é—á–µ–π...\n');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = loadConfig();
    console.log('üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏:', config.selectedExchanges);
    
    // –°–æ–∑–¥–∞–µ–º ExchangeService —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏
    const exchangeService = new ExchangeService(config.selectedExchanges);
    
    console.log('\nüè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏:');
    const availableExchanges = exchangeService.getAvailableExchanges();
    availableExchanges.forEach(exchange => {
      console.log(`  ‚úÖ ${exchange.toUpperCase()}`);
    });
    
    if (availableExchanges.length === 0) {
      console.error('‚ùå –ù–∏ –æ–¥–Ω–∞ –±–∏—Ä–∂–∞ –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
    const testPair = 'BTC/USDT';
    console.log(`\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ${testPair} —Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏:`);
    
    for (const exchangeName of availableExchanges) {
      try {
        console.log(`\nüîç –ë–∏—Ä–∂–∞: ${exchangeName.toUpperCase()}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∏—Ä–∂—É
        exchangeService.setCurrentExchange(exchangeName);
        console.log(`  üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è: ${exchangeService.getCurrentExchange()}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        const price = await exchangeService.getCurrentPrice(testPair, exchangeName);
        console.log(`  üí≤ –¶–µ–Ω–∞: $${price.toFixed(2)}`);
        
        // –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        const ohlcv = await exchangeService.fetchOHLCVData(testPair, '1h', 3, exchangeName);
        console.log(`  üìä OHLCV –¥–∞–Ω–Ω—ã—Ö: ${ohlcv.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (ohlcv.length > 0) {
          const lastCandle = ohlcv[ohlcv.length - 1];
          console.log(`  üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: O:${lastCandle.open.toFixed(2)} H:${lastCandle.high.toFixed(2)} L:${lastCandle.low.toFixed(2)} C:${lastCandle.close.toFixed(2)}`);
        }
        
        console.log(`  ‚úÖ ${exchangeName.toUpperCase()} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`);
        
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –±–∏—Ä–∂–µ ${exchangeName}:`, (error as Error).message);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏...');
    
    try {
      const technicalAnalysisService = new TechnicalAnalysisService();
      const pythonAnalysisService = new PythonAnalysisService(config.pythonServiceUrl);
      const telegramService = new TelegramService(config.telegramToken, config.telegramChatId);
      
      const marketAnalysisService = new MarketAnalysisService(
        exchangeService,
        technicalAnalysisService,
        pythonAnalysisService,
        telegramService
      );
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–Ω—É –ø–∞—Ä—É –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö
      const testPairs = ['BTC/USDT'];
      const analyses = await marketAnalysisService.analyzeMultipleExchanges(testPairs);
      
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
      console.log(`üìà –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: ${analyses.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∏—Ä–∂–∞–º
      const exchangeGroups = analyses.reduce((groups, analysis) => {
        if (!groups[analysis.exchange]) {
          groups[analysis.exchange] = [];
        }
        groups[analysis.exchange].push(analysis);
        return groups;
      }, {} as Record<string, typeof analyses>);
      
      Object.entries(exchangeGroups).forEach(([exchangeName, exchangeAnalyses]) => {
        console.log(`\nüè¶ ${exchangeName.toUpperCase()}:`);
        exchangeAnalyses.forEach(analysis => {
          console.log(`  üìä ${analysis.pair}: ${analysis.signal} (${(analysis.confidence * 100).toFixed(1)}%)`);
          console.log(`    üí∞ –¶–µ–Ω–∞: $${analysis.currentPrice.toFixed(2)}`);
        });
      });
      
      if (analyses.length > 0) {
        console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ–±–µ–∏—Ö –±–∏—Ä–∂
        const uniqueExchanges = [...new Set(analyses.map(a => a.exchange))];
        console.log(`üéØ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç ${uniqueExchanges.length} –±–∏—Ä–∂: ${uniqueExchanges.join(', ')}`);
        
        if (uniqueExchanges.length >= 2) {
          console.log('üéâ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏!');
        } else {
          console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—Ç –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏');
        }
        
      } else {
        console.log('‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
      
    } catch (analysisError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:', (analysisError as Error).message);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMultiExchange().catch(console.error);
