import axios from 'axios';
import * as readline from 'readline';

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name: string;
      username?: string;
      type: string;
    };
    date: number;
    text: string;
  };
}

interface TelegramResponse {
  ok: boolean;
  result: TelegramUpdate[];
}

async function getChatId() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  console.log('ü§ñ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Telegram Chat ID\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  const botToken = await new Promise<string>((resolve) => {
    rl.question('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞: ', (token) => {
      resolve(token.trim());
    });
  });

  if (!botToken) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    rl.close();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...');
  try {
    const botInfo = await axios.get(`https://api.telegram.org/bot${botToken}/getMe`);
    if (!botInfo.data.ok) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      rl.close();
      return;
    }
    console.log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @${botInfo.data.result.username}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error);
    rl.close();
    return;
  }

  console.log('\nüì± –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram');
  console.log(`2. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ @${botToken.split(':')[0]} –∏–ª–∏ –ø–æ –∏–º–µ–Ω–∏`);
  console.log('3. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É');
  console.log('4. –ù–∞–∂–º–∏—Ç–µ Enter –≤ —ç—Ç–æ–º –æ–∫–Ω–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');

  await new Promise<void>((resolve) => {
    rl.question('\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É...', () => {
      resolve();
    });
  });

  console.log('\nüîç –ü–æ–∏—Å–∫ –≤–∞—à–µ–≥–æ chat_id...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updatesResponse = await axios.get<TelegramResponse>(
      `https://api.telegram.org/bot${botToken}/getUpdates?limit=10&offset=-10`
    );

    if (!updatesResponse.data.ok || updatesResponse.data.result.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É.');
      rl.close();
      return;
    }

    console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:');
    const uniqueChats = new Map<number, any>();

    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã
    updatesResponse.data.result.forEach(update => {
      if (update.message) {
        const chat = update.message.chat;
        if (!uniqueChats.has(chat.id)) {
          uniqueChats.set(chat.id, {
            id: chat.id,
            name: chat.first_name || chat.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            type: chat.type,
            username: chat.username,
            lastMessage: update.message.text
          });
        }
      }
    });

    if (uniqueChats.size === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞—Ç–æ–≤.');
      rl.close();
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    const chats = Array.from(uniqueChats.values());
    chats.forEach((chat, index) => {
      console.log(`\n${index + 1}. üí¨ ${chat.name}`);
      console.log(`   üì± Chat ID: ${chat.id}`);
      console.log(`   üìù –¢–∏–ø: ${chat.type}`);
      if (chat.username) {
        console.log(`   üë§ Username: @${chat.username}`);
      }
      console.log(`   üí≠ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${chat.lastMessage}"`);
    });

    // –ï—Å–ª–∏ –æ–¥–∏–Ω —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (chats.length === 1) {
      const selectedChat = chats[0];
      console.log(`\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —á–∞—Ç:`);
      console.log(`üì± Chat ID: ${selectedChat.id}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      try {
        await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          chat_id: selectedChat.id,
          text: 'üéâ –û—Ç–ª–∏—á–Ω–æ! Chat ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!',
          parse_mode: 'HTML'
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }

      console.log('\nüìã –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª:');
      console.log(`TELEGRAM_BOT_TOKEN=${botToken}`);
      console.log(`TELEGRAM_CHAT_ID=${selectedChat.id}`);
      
    } else {
      // –ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ - –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
      const choice = await new Promise<string>((resolve) => {
        rl.question(`\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ (1-${chats.length}): `, (answer) => {
          resolve(answer.trim());
        });
      });

      const chatIndex = parseInt(choice) - 1;
      if (isNaN(chatIndex) || chatIndex < 0 || chatIndex >= chats.length) {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
        rl.close();
        return;
      }

      const selectedChat = chats[chatIndex];
      console.log(`\n‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: ${selectedChat.name}`);
      console.log(`üì± Chat ID: ${selectedChat.id}`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      try {
        await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          chat_id: selectedChat.id,
          text: 'üéâ –û—Ç–ª–∏—á–Ω–æ! Chat ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!',
          parse_mode: 'HTML'
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }

      console.log('\nüìã –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª:');
      console.log(`TELEGRAM_BOT_TOKEN=${botToken}`);
      console.log(`TELEGRAM_CHAT_ID=${selectedChat.id}`);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
  }

  rl.close();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  getChatId().catch(console.error);
}

export { getChatId };
