// filepath: c:\Users\qwazi\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\exchanges-2\src\debug.ts
import { ExchangeService } from './services/ExchangeService';
import { TechnicalAnalysisService } from './services/TechnicalAnalysisService';
import { PythonAnalysisService } from './services/PythonAnalysisService';
import { TelegramService } from './services/TelegramService';
import { MarketAnalysisService } from './services/MarketAnalysisService';
import { loadConfig } from './utils/config';

async function debugAnalysis() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...\n');
    
    const config = loadConfig();
    
    const exchangeService = new ExchangeService();
    const technicalAnalysisService = new TechnicalAnalysisService();
    const pythonAnalysisService = new PythonAnalysisService(config.pythonServiceUrl);
    const telegramService = new TelegramService(config.telegramToken, config.telegramChatId);
    
    const marketAnalysisService = new MarketAnalysisService(
      exchangeService,
      technicalAnalysisService,
      pythonAnalysisService,
      telegramService
    );

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–Ω—É –ø–∞—Ä—É –¥–µ—Ç–∞–ª—å–Ω–æ
    const pair = 'BTC/USDT';
    console.log(`üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ${pair}:`);
    
    const analysis = await marketAnalysisService.analyzePair(pair);
    
    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${analysis.currentPrice}`);
    console.log(`–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(analysis.probability * 100).toFixed(2)}%`);
    console.log(`–°–∏–≥–Ω–∞–ª: ${analysis.signal}`);
    console.log(`–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(2)}%`);
    
    console.log('\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:');
    const latestRSI = technicalAnalysisService.getLatestRSI(analysis.indicators);
    const latestMACD = technicalAnalysisService.getLatestMACD(analysis.indicators);
    const latestBB = technicalAnalysisService.getLatestBollingerBands(analysis.indicators);
    
    console.log(`RSI: ${latestRSI.toFixed(2)}`);
    console.log(`MACD: ${latestMACD.macd.toFixed(4)}, Signal: ${latestMACD.signal.toFixed(4)}, Histogram: ${latestMACD.histogram.toFixed(4)}`);
    console.log(`Bollinger Bands - Upper: ${latestBB.upper.toFixed(2)}, Lower: ${latestBB.lower.toFixed(2)}`);
    
    console.log('\nüêç Python –∞–Ω–∞–ª–∏–∑:');
    console.log(`ARIMA –ø—Ä–æ–≥–Ω–æ–∑: $${analysis.forecast.arima_forecast.toFixed(6)}`);
    console.log(`GARCH –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${(analysis.forecast.garch_volatility * 100).toFixed(2)}%`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞:');
    console.log(`–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å > 0.7: ${analysis.probability > 0.7} (${analysis.probability.toFixed(3)})`);
    console.log(`RSI < 40: ${latestRSI < 40} (${latestRSI.toFixed(2)})`);
    console.log(`MACD > Signal: ${latestMACD.macd > latestMACD.signal} (${latestMACD.macd.toFixed(4)} > ${latestMACD.signal.toFixed(4)})`);
    console.log(`–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > 0.6: ${analysis.confidence > 0.6} (${analysis.confidence.toFixed(3)})`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —É—Å–ª–æ–≤–∏—è –¥–ª—è SELL
    console.log(`\n–î–ª—è SELL:`);
    console.log(`–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å < 0.3: ${analysis.probability < 0.3} (${analysis.probability.toFixed(3)})`);
    console.log(`RSI > 60: ${latestRSI > 60} (${latestRSI.toFixed(2)})`);
    console.log(`MACD < Signal: ${latestMACD.macd < latestMACD.signal} (${latestMACD.macd.toFixed(4)} < ${latestMACD.signal.toFixed(4)})`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
    console.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä:');
    const analyses = await marketAnalysisService.analyzeMultiplePairs(config.analysisPairs);
    const signals = await marketAnalysisService.generateTradingSignals(analyses);
    
    console.log(`\n–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${analyses.length} –ø–∞—Ä`);
    console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: ${signals.length}`);
    
    if (signals.length === 0) {
      console.log('\n‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤! –ü—Ä–∏—á–∏–Ω—ã:');
      for (const analysis of analyses) {
        const rsi = technicalAnalysisService.getLatestRSI(analysis.indicators);
        const macd = technicalAnalysisService.getLatestMACD(analysis.indicators);
        
        console.log(`\n${analysis.pair}:`);
        console.log(`  –°–∏–≥–Ω–∞–ª: ${analysis.signal}`);
        console.log(`  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}% (–Ω—É–∂–Ω–æ >60%)`);
        console.log(`  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(analysis.probability * 100).toFixed(1)}%`);
        console.log(`  RSI: ${rsi.toFixed(1)}`);
        
        if (analysis.signal === 'HOLD') {
          console.log(`  ‚ùå –°–∏–≥–Ω–∞–ª HOLD - –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ª–æ–≤–∏—è`);
        }
        if (analysis.confidence <= 0.6) {
          console.log(`  ‚ùå –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%`);
        }
      }
    } else {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã:');
      signals.forEach(signal => {
        console.log(`${signal.pair}: ${signal.signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(signal.confidence * 100).toFixed(1)}%)`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

debugAnalysis();
