// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminPanel {
  constructor() {
    this.config = {};
    this.init();
  }

  async init() {
    this.setupTabs();
    this.setupEventListeners();
    await this.loadConfig();
    await this.loadStatus();
  }

  setupTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabPanes = document.querySelectorAll('.tab-pane');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.dataset.tab;
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabPanes.forEach(pane => pane.classList.remove('active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        button.classList.add('active');
        document.getElementById(targetTab).classList.add('active');
      });
    });
  }

  setupEventListeners() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Bot Token
    document.getElementById('validateTokenBtn').addEventListener('click', () => {
      this.validateBotToken();
    });

    // –ü–æ–∏—Å–∫ Chat ID
    document.getElementById('findChatBtn').addEventListener('click', () => {
      this.findChatId();
    });

    // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.getElementById('testMessageBtn').addEventListener('click', () => {
      this.testMessage();
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    document.getElementById('saveConfigBtn').addEventListener('click', () => {
      this.saveConfig();
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    document.getElementById('refreshStatusBtn').addEventListener('click', () => {
      this.loadStatus();
    });

    // –í—ã–±–æ—Ä/—Å–Ω—è—Ç–∏–µ –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    document.getElementById('selectAllPairs').addEventListener('click', () => {
      this.selectAllPairs(true);
    });

    document.getElementById('deselectAllPairs').addEventListener('click', () => {
      this.selectAllPairs(false);
    });
  }

  async loadConfig() {
    try {
      const response = await fetch('/api/admin/config');
      const data = await response.json();
      
      if (data.success) {
        this.config = data.config;
        this.populateForm();
      } else {
        this.showAlert('danger', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + data.error);
      }
    } catch (error) {
      this.showAlert('danger', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message);
    }
  }

  populateForm() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    document.getElementById('telegramBotToken').value = this.config.telegramBotToken || '';
    document.getElementById('telegramChatId').value = this.config.telegramChatId || '';
    document.getElementById('bybitApiKey').value = this.config.bybitApiKey || '';
    document.getElementById('bybitSecretKey').value = this.config.bybitSecretKey || '';
    document.getElementById('analysisInterval').value = this.config.analysisInterval || '4h';

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    const selectedPairs = this.config.analysisPairs || [];
    const checkboxes = document.querySelectorAll('input[name="analysisPairs"]');
    
    checkboxes.forEach(checkbox => {
      checkbox.checked = selectedPairs.includes(checkbox.value);
    });
  }

  async validateBotToken() {
    const token = document.getElementById('telegramBotToken').value.trim();
    
    if (!token) {
      this.showAlert('warning', '–í–≤–µ–¥–∏—Ç–µ Bot Token');
      return;
    }

    this.showLoading('tokenValidationResult');

    try {
      const response = await fetch('/api/admin/telegram/validate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ botToken: token })
      });

      const data = await response.json();
      this.hideLoading('tokenValidationResult');

      if (data.valid) {
        this.showAlert('success', `‚úÖ Token –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç: @${data.botInfo.username}`, 'tokenValidationResult');
      } else {
        this.showAlert('danger', `‚ùå ${data.error}`, 'tokenValidationResult');
      }
    } catch (error) {
      this.hideLoading('tokenValidationResult');
      this.showAlert('danger', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ' + error.message, 'tokenValidationResult');
    }
  }

  async findChatId() {
    const token = document.getElementById('telegramBotToken').value.trim();
    
    if (!token) {
      this.showAlert('warning', '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Bot Token');
      return;
    }

    this.showLoading('chatIdResult');

    try {
      const response = await fetch('/api/admin/telegram/find-chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ botToken: token })
      });

      const data = await response.json();
      this.hideLoading('chatIdResult');

      if (data.found) {
        document.getElementById('telegramChatId').value = data.chatId;
        this.showAlert('success', `‚úÖ Chat ID –Ω–∞–π–¥–µ–Ω: ${data.chatId}`, 'chatIdResult');
      } else {
        this.showAlert('warning', `‚ö†Ô∏è ${data.error}`, 'chatIdResult');
      }
    } catch (error) {
      this.hideLoading('chatIdResult');
      this.showAlert('danger', '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message, 'chatIdResult');
    }
  }

  async testMessage() {
    const token = document.getElementById('telegramBotToken').value.trim();
    const chatId = document.getElementById('telegramChatId').value.trim();
    
    if (!token || !chatId) {
      this.showAlert('warning', '–í–≤–µ–¥–∏—Ç–µ Bot Token –∏ Chat ID');
      return;
    }

    this.showLoading('testMessageResult');

    try {
      const response = await fetch('/api/admin/telegram/test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ botToken: token, chatId: chatId })
      });

      const data = await response.json();
      this.hideLoading('testMessageResult');

      if (data.success) {
        this.showAlert('success', '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'testMessageResult');
      } else {
        this.showAlert('danger', `‚ùå ${data.error}`, 'testMessageResult');
      }
    } catch (error) {
      this.hideLoading('testMessageResult');
      this.showAlert('danger', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message, 'testMessageResult');
    }
  }

  async saveConfig() {
    const config = {
      telegramBotToken: document.getElementById('telegramBotToken').value.trim(),
      telegramChatId: document.getElementById('telegramChatId').value.trim(),
      bybitApiKey: document.getElementById('bybitApiKey').value.trim(),
      bybitSecretKey: document.getElementById('bybitSecretKey').value.trim(),
      analysisInterval: document.getElementById('analysisInterval').value,
      analysisPairs: Array.from(document.querySelectorAll('input[name="analysisPairs"]:checked'))
        .map(cb => cb.value)
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!config.telegramBotToken || !config.telegramChatId) {
      this.showAlert('warning', 'Telegram Bot Token –∏ Chat ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      return;
    }

    if (config.analysisPairs.length === 0) {
      this.showAlert('warning', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É');
      return;
    }

    this.showLoading('saveConfigResult');

    try {
      const response = await fetch('/api/admin/config', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config)
      });

      const data = await response.json();
      this.hideLoading('saveConfigResult');

      if (data.success) {
        this.config = config;
        this.showAlert('success', '‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'saveConfigResult');
      } else {
        this.showAlert('danger', `‚ùå ${data.error}`, 'saveConfigResult');
      }
    } catch (error) {
      this.hideLoading('saveConfigResult');
      this.showAlert('danger', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'saveConfigResult');
    }
  }

  async loadStatus() {
    this.showLoading('systemStatus');

    try {
      const response = await fetch('/api/admin/status');
      const data = await response.json();
      
      this.hideLoading('systemStatus');

      if (data.success) {
        this.displayStatus(data.status);
      } else {
        this.showAlert('danger', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + data.error, 'systemStatus');
      }
    } catch (error) {
      this.hideLoading('systemStatus');
      this.showAlert('danger', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message, 'systemStatus');
    }
  }

  displayStatus(status) {
    const statusHtml = `
      <div class="status-card">
        <h4>üìä –ö–µ—à –¥–∞–Ω–Ω—ã—Ö</h4>
        <p><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> ${status.cache.hasData ? '‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã' : '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
        ${status.cache.lastUpdate ? `<p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> ${new Date(status.cache.lastUpdate).toLocaleString()}</p>` : ''}
        ${status.cache.dataAge !== null ? `<p><strong>–í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö:</strong> ${status.cache.dataAge} –º–∏–Ω.</p>` : ''}
        <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤:</strong> ${status.cache.analysisCount}</p>
      </div>
      
      <div class="status-card">
        <h4>üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞</h4>
        <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> ${Math.round(status.system.uptime)} —Å–µ–∫.</p>
        <p><strong>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç–∏:</strong> ${Math.round(status.system.memory.used / 1024 / 1024)} –ú–ë</p>
        <p><strong>–í–µ—Ä—Å–∏—è Node.js:</strong> ${status.system.version}</p>
      </div>
      
      <div class="status-card">
        <h4>‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞</h4>
        <p>${new Date(status.timestamp).toLocaleString()}</p>
      </div>
    `;
    
    document.getElementById('systemStatus').innerHTML = statusHtml;
  }

  selectAllPairs(select) {
    const checkboxes = document.querySelectorAll('input[name="analysisPairs"]');
    checkboxes.forEach(checkbox => {
      checkbox.checked = select;
    });
  }

  showAlert(type, message, containerId = 'alerts') {
    const container = document.getElementById(containerId);
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type}`;
    alertDiv.innerHTML = message;
    
    container.innerHTML = '';
    container.appendChild(alertDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (alertDiv.parentNode) {
        alertDiv.remove();
      }
    }, 5000);
  }

  showLoading(containerId) {
    const container = document.getElementById(containerId);
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
  }

  hideLoading(containerId) {
    // –ú–µ—Ç–æ–¥ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  new AdminPanel();
});
