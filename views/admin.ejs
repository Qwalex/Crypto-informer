<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –ë–æ—Ç–∞</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .nav-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #ddd;
        }

        .nav-tab {
            flex: 1;
            padding: 20px;
            text-align: center;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            color: #666;
            transition: all 0.3s ease;
        }

        .nav-tab.active {
            background: white;
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
        }

        .nav-tab:hover {
            background: #e9ecef;
        }

        .tab-content {
            display: none;
            padding: 40px;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
            font-size: 1rem;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .form-group small {
            display: block;
            margin-top: 5px;
            color: #666;
            font-size: 0.9rem;
        }

        .button {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
        }

        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(52, 152, 219, 0.3);
        }

        .button.secondary {
            background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        }

        .button.success {
            background: linear-gradient(135deg, #27ae60, #229954);
        }

        .button.danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        .exchange-checkbox {
            margin-bottom: 15px;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }

        .exchange-checkbox:hover {
            border-color: #3498db;
            background: #f0f8ff;
        }

        .exchange-checkbox.selected {
            border-color: #27ae60;
            background: #e8f5e8;
        }

        .exchange-checkbox input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
        }

        .exchange-checkbox label {
            cursor: pointer;
            margin: 0;
            font-weight: normal;
        }

        .pairs-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .pair-checkbox {
            display: flex;
            align-items: center;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .pair-checkbox:hover {
            border-color: #3498db;
            background: #f8f9fa;
        }

        .pair-checkbox.selected {
            border-color: #27ae60;
            background: #d5f4e6;
        }

        .pair-checkbox input {
            margin-right: 8px;
            width: auto;
        }

        .pair-dropdown-item {
            padding: 10px 15px;
            cursor: pointer;
            border-bottom: 1px solid #f0f0f0;
            transition: background 0.2s ease;
        }

        .pair-dropdown-item:hover {
            background: #f8f9fa;
        }

        .pair-dropdown-item:last-child {
            border-bottom: none;
        }

        .selected-pair-tag {
            display: inline-flex;
            align-items: center;
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .selected-pair-tag .remove-pair {
            margin-left: 8px;
            cursor: pointer;
            font-weight: bold;
            opacity: 0.8;
            transition: opacity 0.2s ease;
        }

        .selected-pair-tag .remove-pair:hover {
            opacity: 1;
        }

        .alert {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .alert.success {
            background: #d5f4e6;
            color: #27ae60;
            border: 1px solid #27ae60;
        }

        .alert.error {
            background: #fdf2f2;
            color: #e74c3c;
            border: 1px solid #e74c3c;
        }

        .alert.warning {
            background: #fff5d7;
            color: #f39c12;
            border: 1px solid #f39c12;
        }

        .alert.info {
            background: #e8f4f8;
            color: #3498db;
            border: 1px solid #3498db;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .instructions {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }

        .instructions h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }

        .instructions ol {
            padding-left: 20px;
        }

        .instructions li {
            margin-bottom: 10px;
            line-height: 1.6;
        }

        .instructions a {
            color: #3498db;
            text-decoration: none;
        }

        .instructions a:hover {
            text-decoration: underline;
        }

        .chat-id-finder {
            background: #e8f4f8;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #3498db;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-indicator.green {
            background: #27ae60;
        }

        .status-indicator.red {
            background: #e74c3c;
        }

        .status-indicator.yellow {
            background: #f39c12;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }

            .header {
                padding: 20px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .tab-content {
                padding: 20px;
            }

            .nav-tabs {
                flex-direction: column;
            }

            .pairs-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ë–æ—Ç</h1>
            <p>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('telegram')">üì± Telegram</button>
            <button class="nav-tab" onclick="showTab('exchange')">üè¶ –ë–∏—Ä–∂–∞</button>
            <button class="nav-tab" onclick="showTab('analysis')">üìä –ê–Ω–∞–ª–∏–∑</button>
            <button class="nav-tab" onclick="showTab('status')">‚öôÔ∏è –°—Ç–∞—Ç—É—Å</button>
        </div>

        <form id="configForm">
            <!-- Telegram Tab -->
            <div id="telegram" class="tab-content active">
                <div class="instructions">
                    <h3>üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞</h3>
                    <ol>
                        <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∫ <a href="https://t.me/BotFather" target="_blank">@BotFather</a></li>
                        <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/newbot</code></li>
                        <li>–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ Bot Token</li>
                        <li>–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω"</li>
                        <li>–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–º—É –±–æ—Ç—É</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ Chat ID" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
                    </ol>
                </div>

                <div class="form-group">
                    <label for="telegramBotToken">Bot Token *</label>
                    <input type="text" id="telegramBotToken" name="telegramBotToken" 
                           placeholder="123456789:ABCdefGHijklmnopQRSTuvwxyz" required>
                    <small>–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –æ—Ç @BotFather</small>
                </div>

                <div style="margin-bottom: 20px;">
                    <button type="button" class="button" onclick="validateToken()">
                        <span id="tokenValidationLoading" class="loading" style="display: none;"></span>
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω
                    </button>
                    <div id="tokenValidationResult"></div>
                </div>

                <div class="chat-id-finder">
                    <h3>üîç –ü–æ–∏—Å–∫ Chat ID</h3>
                    <p>–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–º—É –±–æ—Ç—É –≤ Telegram, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
                    <br>
                    <button type="button" class="button success" onclick="findChatId()">
                        <span id="chatIdLoading" class="loading" style="display: none;"></span>
                        –ù–∞–π—Ç–∏ Chat ID
                    </button>
                    <div id="chatIdResult" style="margin-top: 15px;"></div>
                </div>

                <div class="form-group">
                    <label for="telegramChatId">Chat ID *</label>
                    <input type="text" id="telegramChatId" name="telegramChatId" 
                           placeholder="123456789" required>
                    <small>ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</small>
                </div>

                <div style="margin-top: 20px;">
                    <button type="button" class="button success" onclick="sendTestMessage()">
                        <span id="testMessageLoading" class="loading" style="display: none;"></span>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    </button>
                    <div id="testMessageResult"></div>
                </div>
            </div>            <!-- Exchange Tab -->
            <div id="exchange" class="tab-content">
                <div class="instructions">
                    <h3>üè¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏—Ä–∂</h3>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä–∞—Ö. 
                       API –∫–ª—é—á–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
                </div>                <!-- –í—ã–±–æ—Ä –±–∏—Ä–∂ -->
                <div class="form-group">
                    <label>–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ * (106 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ä–∂)</label>
                    <small>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏—Ä–∂ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä–∞—Ö. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –±–∏—Ä–∂–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ccxt.</small>
                    
                    <!-- –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º -->
                    <div style="margin: 15px 0;">
                        <button type="button" class="button secondary" onclick="showExchangeCategory('top')">–¢–û–ü-10 –±–∏—Ä–∂</button>
                        <button type="button" class="button secondary" onclick="showExchangeCategory('derivatives')">–î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã</button>
                        <button type="button" class="button secondary" onclick="showExchangeCategory('regional')">–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ</button>
                        <button type="button" class="button secondary" onclick="showExchangeCategory('altcoins')">–ê–ª—å—Ç–∫–æ–∏–Ω—ã</button>
                        <button type="button" class="button secondary" onclick="showExchangeCategory('all')">–í—Å–µ –±–∏—Ä–∂–∏</button>
                    </div>

                    <!-- –ü–æ–∏—Å–∫ –ø–æ –±–∏—Ä–∂–∞–º -->
                    <div style="margin: 15px 0;">
                        <input type="text" id="exchangeSearch" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–∏—Ä–∂–∏..." 
                               style="padding: 8px; border: 1px solid #ddd; border-radius: 5px; width: 300px;"
                               oninput="filterExchanges()">
                    </div>

                    <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–∏—Ä–∂ -->
                    <div id="exchangesContainer" style="margin-top: 15px; display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 8px; max-height: 400px; overflow-y: auto; border: 1px solid #eee; padding: 15px; border-radius: 8px;">
                        <!-- –ë–∏—Ä–∂–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ JavaScript -->
                    </div>
                    
                    <div style="margin-top: 15px;">
                        <button type="button" class="button secondary" onclick="selectTopExchanges()">–í—ã–±—Ä–∞—Ç—å –¢–û–ü-5 –±–∏—Ä–∂</button>
                        <button type="button" class="button secondary" onclick="selectAllVisible()">–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ</button>
                        <button type="button" class="button secondary" onclick="clearAllExchanges()">–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä</button>
                        <span id="selectedCount" style="margin-left: 15px; font-weight: bold;">–í—ã–±—Ä–∞–Ω–æ: 0</span>
                    </div>
                </div>                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö -->
                <div class="alert success" style="margin-top: 20px;">
                    <h4>üìä –†–∞–±–æ—Ç–∞ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</h4>
                    <p><strong>API –∫–ª—é—á–∏ –ù–ï –¢–†–ï–ë–£–Æ–¢–°–Ø!</strong> –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</p>
                    <ul>
                        <li>üìà –¶–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤</li>
                        <li>üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD, Bollinger Bands)</li>
                        <li>üîÑ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</li>
                        <li>üåç –î–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏—Ä–∂ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
                    </ul>
                    <p>–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"!</p>
                </div>            </div>

            <!-- Analysis Tab -->
            <div id="analysis" class="tab-content">
                <div class="instructions">
                    <h3>üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞</h3>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. 
                       –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 4 —á–∞—Å–∞ –¥–ª—è swing-—Ç–æ—Ä–≥–æ–≤–ª–∏.</p>
                </div>

                <div class="form-group">
                    <label for="analysisInterval">–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ *</label>
                    <select id="analysisInterval" name="analysisInterval" required>
                        <option value="15m">15 –º–∏–Ω—É—Ç</option>
                        <option value="30m">30 –º–∏–Ω—É—Ç</option>
                        <option value="1h">1 —á–∞—Å</option>
                        <option value="2h">2 —á–∞—Å–∞</option>
                        <option value="4h" selected>4 —á–∞—Å–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</option>
                        <option value="6h">6 —á–∞—Å–æ–≤</option>
                        <option value="12h">12 —á–∞—Å–æ–≤</option>
                        <option value="1d">1 –¥–µ–Ω—å</option>
                    </select>
                    <small>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</small>
                </div>                <div class="form-group">
                    <label>–í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ *</label>
                    <small>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-15 –ø–∞—Ä)</small>
                    
                    <!-- –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä -->
                    <div style="margin-top: 10px; margin-bottom: 15px;">
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <input type="text" id="pairSearch" placeholder="–ù–∞–π—Ç–∏ –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC)" 
                                   style="flex: 1; padding: 10px; border: 2px solid #e0e0e0; border-radius: 8px;"
                                   oninput="filterPairs()" onfocus="showDropdown()" onblur="hideDropdown()">
                            <button type="button" class="button secondary" onclick="showAllPairs()">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä—ã</button>
                        </div>
                        
                        <!-- –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä -->
                        <div id="pairDropdown" style="display: none; max-height: 200px; overflow-y: auto; border: 2px solid #3498db; border-radius: 8px; background: white; margin-top: 5px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                            <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
                        </div>
                    </div>

                    <!-- –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã -->
                    <div id="selectedPairs" style="margin-top: 15px;">
                        <h4>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã:</h4>
                        <div id="selectedPairsList" style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px;">
                            <!-- –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>                <div style="margin-top: 20px;">
                    <button type="button" class="button" onclick="selectPopularPairs()">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã</button>
                    <button type="button" class="button secondary" onclick="clearAllPairs()">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
                </div>
            </div>

            <!-- Status Tab -->
            <div id="status" class="tab-content">
                <div class="instructions">
                    <h3>‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.</p>
                </div>

                <div id="systemStatus">
                    <!-- –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>

                <div style="margin-top: 30px;">
                    <button type="button" class="button" onclick="checkSystemStatus()">
                        <span id="statusLoading" class="loading" style="display: none;"></span>
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                    </button>
                </div>
            </div>
        </form>

        <div style="padding: 30px; text-align: center; border-top: 1px solid #e0e0e0;">
            <button type="button" class="button success" onclick="saveConfiguration()" style="font-size: 1.1rem; padding: 15px 30px;">
                <span id="saveLoading" class="loading" style="display: none;"></span>
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
            <div id="saveResult" style="margin-top: 15px;"></div>
        </div>
    </div>

    <script>        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let availablePairs = [];
        let selectedPairs = [];
        let currentConfig = {};
        let filteredPairs = [];
        let selectedExchanges = ['binance', 'bybit']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ø –±–∏—Ä–∂–∏

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-tab').forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        document.addEventListener('DOMContentLoaded', async function() {
            await loadConfiguration();
            await loadAvailablePairs();
            renderSelectedPairs();
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        async function loadConfiguration() {            try {
                const response = await fetch('/api/admin/config');
                if (response.ok) {
                    currentConfig = await response.json();
                    fillForm(currentConfig);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            }
        }        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏
        function fillForm(config) {
            document.getElementById('telegramBotToken').value = config.telegramBotToken || '';
            document.getElementById('telegramChatId').value = config.telegramChatId || '';
            document.getElementById('analysisInterval').value = config.analysisInterval || '4h';
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏
            selectedExchanges = config.selectedExchanges || ['binance', 'bybit'];
            selectedExchanges.forEach(exchange => {
                const checkbox = document.getElementById(`exchange_${exchange}`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
            updateSelectedExchanges();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            selectedPairs = config.analysisPairs || [];
        }// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
        async function loadAvailablePairs() {
            if (selectedExchanges.length === 0) {
                availablePairs = [];
                filteredPairs = [];
                return;
            }

            try {
                const response = await fetch(`/api/admin/available-pairs?exchanges=${selectedExchanges.join(',')}`);
                if (response.ok) {
                    availablePairs = await response.json();
                    filteredPairs = [...availablePairs];
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä:', error);
                // Fallback —Å–ø–∏—Å–æ–∫
                availablePairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT', 'ADA/USDT', 'SOL/USDT'];
                filteredPairs = [...availablePairs];
            }
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        function filterPairs() {
            const searchTerm = document.getElementById('pairSearch').value.toLowerCase();
            
            if (searchTerm.length === 0) {
                filteredPairs = [];
                renderDropdown();
                return;
            }

            filteredPairs = availablePairs.filter(pair => 
                pair.toLowerCase().includes(searchTerm) && !selectedPairs.includes(pair)
            );
            
            renderDropdown();
            showDropdown();
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        function showDropdown() {
            const dropdown = document.getElementById('pairDropdown');
            dropdown.style.display = 'block';
        }

        // –°–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–ª–∏–∫–æ–≤)
        function hideDropdown() {
            setTimeout(() => {
                const dropdown = document.getElementById('pairDropdown');
                dropdown.style.display = 'none';
            }, 200);
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
        function showAllPairs() {
            filteredPairs = availablePairs.filter(pair => !selectedPairs.includes(pair));
            renderDropdown();
            showDropdown();
            document.getElementById('pairSearch').focus();
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        function renderDropdown() {
            const dropdown = document.getElementById('pairDropdown');
            
            if (filteredPairs.length === 0) {
                dropdown.innerHTML = '<div class="pair-dropdown-item" style="color: #666;">–ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }

            const html = filteredPairs.slice(0, 10).map(pair => 
                `<div class="pair-dropdown-item" onclick="addPair('${pair}')">${pair}</div>`
            ).join('');
            
            dropdown.innerHTML = html;
        }

        // –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        function addPair(pair) {
            if (!selectedPairs.includes(pair)) {
                selectedPairs.push(pair);
                selectedPairs.sort();
                renderSelectedPairs();
                
                // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
                document.getElementById('pairSearch').value = '';
                filteredPairs = [];
                renderDropdown();
            }
            hideDropdown();
        }

        // –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        function removePair(pair) {
            selectedPairs = selectedPairs.filter(p => p !== pair);
            renderSelectedPairs();
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä
        function renderSelectedPairs() {
            const container = document.getElementById('selectedPairsList');
            
            if (selectedPairs.length === 0) {
                container.innerHTML = '<p style="color: #666; font-style: italic;">–ü–∞—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</p>';
                return;
            }

            const html = selectedPairs.map(pair => 
                `<div class="selected-pair-tag">
                    ${pair}
                    <span class="remove-pair" onclick="removePair('${pair}')">&times;</span>
                </div>`
            ).join('');
            
            container.innerHTML = html;
        }

        // –í—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        function selectPopularPairs() {
            const popularPairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT', 'XRP/USDT', 'DOT/USDT', 'LINK/USDT'];
            
            popularPairs.forEach(pair => {
                if (availablePairs.includes(pair) && !selectedPairs.includes(pair)) {
                    selectedPairs.push(pair);
                }
            });
            
            selectedPairs.sort();
            renderSelectedPairs();
        }

        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã
        function clearAllPairs() {
            selectedPairs = [];
            renderSelectedPairs();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        async function validateToken() {
            const token = document.getElementById('telegramBotToken').value;
            if (!token) {
                showAlert('tokenValidationResult', '–í–≤–µ–¥–∏—Ç–µ Bot Token', 'error');
                return;
            }

            showLoading('tokenValidationLoading', true);
              try {
                const response = await fetch('/api/admin/telegram/validate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ botToken: token })
                });

                const result = await response.json();
                
                if (result.valid) {
                    showAlert('tokenValidationResult', 
                        `‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç: @${result.botInfo.username} (${result.botInfo.first_name})`, 
                        'success');
                } else {
                    showAlert('tokenValidationResult', `‚ùå ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('tokenValidationResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('tokenValidationLoading', false);
            }
        }

        // –ü–æ–∏—Å–∫ Chat ID
        async function findChatId() {
            const token = document.getElementById('telegramBotToken').value;
            if (!token) {
                showAlert('chatIdResult', '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Bot Token', 'error');
                return;
            }

            showLoading('chatIdLoading', true);
              try {
                const response = await fetch('/api/admin/telegram/find-chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ botToken: token })
                });

                const result = await response.json();
                
                if (result.found) {
                    document.getElementById('telegramChatId').value = result.chatId;
                    showAlert('chatIdResult', 
                        `‚úÖ Chat ID –Ω–∞–π–¥–µ–Ω: ${result.chatId}<br>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.firstName}${result.username ? ' (@' + result.username + ')' : ''}`, 
                        'success');
                } else {
                    showAlert('chatIdResult', `‚ùå ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('chatIdResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('chatIdLoading', false);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async function sendTestMessage() {
            const token = document.getElementById('telegramBotToken').value;
            const chatId = document.getElementById('telegramChatId').value;
            
            if (!token || !chatId) {
                showAlert('testMessageResult', '–í–≤–µ–¥–∏—Ç–µ Bot Token –∏ Chat ID', 'error');
                return;
            }

            showLoading('testMessageLoading', true);
              try {
                const response = await fetch('/api/admin/telegram/test', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ botToken: token, chatId })
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert('testMessageResult', '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success');
                } else {
                    showAlert('testMessageResult', `‚ùå ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('testMessageResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('testMessageLoading', false);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        async function checkSystemStatus() {
            showLoading('statusLoading', true);
              try {
                const response = await fetch('/api/admin/status');
                const status = await response.json();
                
                let html = '<div class="alert info"><h3>–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</h3>';
                
                html += `<p><span class="status-indicator ${status.api ? 'green' : 'red'}"></span>API –°–µ—Ä–≤–µ—Ä: ${status.api ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</p>`;
                html += `<p><span class="status-indicator ${status.cache ? 'green' : 'red'}"></span>–ö–µ—à: ${status.cache ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</p>`;
                html += `<p><span class="status-indicator ${status.exchange ? 'green' : 'red'}"></span>–ë–∏—Ä–∂–∞: ${status.exchange ? '–î–æ—Å—Ç—É–ø–Ω–∞' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}</p>`;
                html += `<p><span class="status-indicator ${status.python ? 'green' : 'yellow'}"></span>Python —Å–µ—Ä–≤–∏—Å: ${status.python ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'}</p>`;
                
                html += '</div>';
                
                document.getElementById('systemStatus').innerHTML = html;
            } catch (error) {
                showAlert('systemStatus', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`, 'error');
            } finally {
                showLoading('statusLoading', false);
            }
        }        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        async function saveConfiguration() {
            const config = {
                telegramBotToken: document.getElementById('telegramBotToken').value,
                telegramChatId: document.getElementById('telegramChatId').value,
                selectedExchanges: selectedExchanges,
                analysisInterval: document.getElementById('analysisInterval').value,
                analysisPairs: selectedPairs
            };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!config.telegramBotToken) {
                showAlert('saveResult', 'Bot Token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'error');
                showTab('telegram');
                return;
            }

            if (!config.telegramChatId) {
                showAlert('saveResult', 'Chat ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'error');
                showTab('telegram');
                return;
            }

            if (selectedExchanges.length === 0) {
                showAlert('saveResult', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±–∏—Ä–∂—É', 'error');
                showTab('exchange');
                return;
            }

            if (selectedPairs.length === 0) {
                showAlert('saveResult', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É', 'error');
                showTab('analysis');
                return;
            }

            showLoading('saveLoading', true);
            
            try {
                const response = await fetch('/api/admin/config', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(config)
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert('saveResult', `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!<br>–ë–∏—Ä–∂–∏: ${selectedExchanges.join(', ')}<br>–ü–∞—Ä—ã: ${selectedPairs.length}`, 'success');
                    currentConfig = config;
                } else {
                    showAlert('saveResult', `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('saveResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('saveLoading', false);
            }
        }        // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∏—Ä–∂ –∏–∑ ccxt (106 –±–∏—Ä–∂)
        const allExchanges = [
            'alpaca', 'apex', 'ascendex', 'bequant', 'bigone', 'binance', 'binancecoinm', 'binanceus', 'binanceusdm', 'bingx',
            'bit2c', 'bitbank', 'bitbns', 'bitfinex', 'bitflyer', 'bitget', 'bithumb', 'bitmart', 'bitmex', 'bitopro',
            'bitrue', 'bitso', 'bitstamp', 'bitteam', 'bittrade', 'bitvavo', 'blockchaincom', 'blofin', 'btcalpha', 'btcbox',
            'btcmarkets', 'btcturk', 'bybit', 'cex', 'coinbase', 'coinbaseadvanced', 'coinbaseexchange', 'coinbaseinternational', 'coincatch', 'coincheck',
            'coinex', 'coinlist', 'coinmate', 'coinmetro', 'coinone', 'coinsph', 'coinspot', 'cryptocom', 'cryptomus', 'defx',
            'delta', 'deribit', 'derive', 'digifinex', 'ellipx', 'exmo', 'fmfwio', 'gate', 'gateio', 'gemini',
            'hashkey', 'hitbtc', 'hollaex', 'htx', 'huobi', 'hyperliquid', 'independentreserve', 'indodax', 'kraken', 'krakenfutures',
            'kucoin', 'kucoinfutures', 'latoken', 'lbank', 'luno', 'mercado', 'mexc', 'modetrade', 'myokx', 'ndax',
            'novadax', 'oceanex', 'okcoin', 'okx', 'okxus', 'onetrading', 'oxfun', 'p2b', 'paradex', 'paymium',
            'phemex', 'poloniex', 'probit', 'timex', 'tokocrypto', 'tradeogre', 'upbit', 'vertex', 'wavesexchange', 'whitebit',
            'woo', 'woofipro', 'xt', 'yobit', 'zaif', 'zonda'
        ];

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–∏—Ä–∂
        const exchangeCategories = {
            top: ['binance', 'bybit', 'okx', 'coinbase', 'kraken', 'kucoin', 'bitfinex', 'huobi', 'gate', 'mexc'],
            derivatives: ['bitmex', 'bybit', 'binanceusdm', 'binancecoinm', 'krakenfutures', 'kucoinfutures', 'phemex', 'deribit'],
            regional: ['binanceus', 'coinbaseadvanced', 'gemini', 'btcmarkets', 'bitflyer', 'upbit', 'bithumb', 'coinone'],
            altcoins: ['gate', 'mexc', 'bitget', 'bitmart', 'lbank', 'xt', 'probit', 'latoken'],
            all: allExchanges
        };

        // –û–ø–∏—Å–∞–Ω–∏—è –±–∏—Ä–∂
        const exchangeDescriptions = {
            'alpaca': 'Alpaca - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –±–∏—Ä–∂–∞ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π',
            'apex': 'ApeX - –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'ascendex': 'AscendEX - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –±–∏—Ä–∂–∞ –∞–∫—Ç–∏–≤–æ–≤',
            'bequant': 'Bequant - –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'bigone': 'BigONE - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –±–∏—Ä–∂–∞ –∞–∫—Ç–∏–≤–æ–≤',
            'binance': 'Binance - –ö—Ä—É–ø–Ω–µ–π—à–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –≤ –º–∏—Ä–µ',
            'binancecoinm': 'Binance COIN-M - –§—å—é—á–µ—Ä—Å—ã —Å –º–æ–Ω–µ—Ç–Ω–æ–π –º–∞—Ä–∂–µ–π',
            'binanceus': 'Binance US - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ Binance',
            'binanceusdm': 'Binance USD-M - –§—å—é—á–µ—Ä—Å—ã —Å –¥–æ–ª–ª–∞—Ä–æ–≤–æ–π –º–∞—Ä–∂–µ–π',
            'bingx': 'BingX - –ë–∏—Ä–∂–∞ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º',
            'bit2c': 'Bit2C - –ò–∑—Ä–∞–∏–ª—å—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitbank': 'bitbank - –Ø–ø–æ–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitbns': 'BitBNS - –ò–Ω–¥–∏–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitfinex': 'Bitfinex - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'bitflyer': 'bitFlyer - –ö—Ä—É–ø–Ω–µ–π—à–∞—è –±–∏—Ä–∂–∞ –≤ –Ø–ø–æ–Ω–∏–∏',
            'bitget': 'Bitget - –ë–∏—Ä–∂–∞ —Å –∫–æ–ø–∏-—Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏',
            'bithumb': 'Bithumb - –Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitmart': 'BitMart - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –±–∏—Ä–∂–∞ –∞–∫—Ç–∏–≤–æ–≤',
            'bitmex': 'BitMEX - –ë–∏—Ä–∂–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤ –∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤',
            'bitopro': 'BitoPro - –¢–∞–π–≤–∞–Ω—å—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitrue': 'Bitrue - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitso': 'Bitso - –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitstamp': 'Bitstamp - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitteam': 'BitTeam - –ë–∏—Ä–∂–∞ —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π',
            'bittrade': 'BitTrade - –Ø–ø–æ–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bitvavo': 'Bitvavo - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'blockchaincom': 'Blockchain.com - –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –∏ –±–∏—Ä–∂–∞',
            'blofin': 'Blofin - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'btcalpha': 'BTC-Alpha - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'btcbox': 'BTCBOX - –Ø–ø–æ–Ω—Å–∫–∞—è –±–∏—Ä–∂–∞ –±–∏—Ç–∫–æ–∏–Ω–æ–≤',
            'btcmarkets': 'BTC Markets - –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'btcturk': 'BTCTurk - –¢—É—Ä–µ—Ü–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'bybit': 'Bybit - –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –±–∏—Ä–∂–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'cex': 'CEX.IO - –ú—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'coinbase': 'Coinbase - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞',
            'coinbaseadvanced': 'Coinbase Advanced - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
            'coinbaseexchange': 'Coinbase Exchange - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'coinbaseinternational': 'Coinbase International - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
            'coincatch': 'CoinCatch - –î–µ—Ä–∏–≤–∞—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'coincheck': 'Coincheck - –Ø–ø–æ–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'coinex': 'CoinEx - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –±–∏—Ä–∂–∞ –≤–∞–ª—é—Ç',
            'coinlist': 'CoinList - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤',
            'coinmate': 'CoinMate - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'coinmetro': 'CoinMetro - –≠—Å—Ç–æ–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'coinone': 'CoinOne - –Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'coinsph': 'Coins.ph - –§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'coinspot': 'CoinSpot - –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'cryptocom': 'Crypto.com - –ú–æ–±–∏–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'cryptomus': 'Cryptomus - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π',
            'defx': 'DEFX - –ë–∏—Ä–∂–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤',
            'delta': 'Delta - –ë–∏—Ä–∂–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'deribit': 'Deribit - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –±–∏—Ä–∂–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'derive': 'Derive - DEX –±–∏—Ä–∂–∞',
            'digifinex': 'DigiFinex - –°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –±–∏—Ä–∂–∞ –∞–∫—Ç–∏–≤–æ–≤',
            'ellipx': 'EllipX - –ë–∏—Ä–∂–∞ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏',
            'exmo': 'EXMO - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'fmfwio': 'FMFW.io - –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'gate': 'Gate.io - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'gateio': 'Gate.io - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ Gate.io',
            'gemini': 'Gemini - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ä–µ–≥—É–ª–∏—Ä—É–µ–º–∞—è –±–∏—Ä–∂–∞',
            'hashkey': 'HashKey - –ê–∑–∏–∞—Ç—Å–∫–∞—è –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏—Ä–∂–∞',
            'hitbtc': 'HitBTC - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'hollaex': 'HollaEx - –ë–µ–ª–∞—è –º–µ—Ç–∫–∞ –±–∏—Ä–∂–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è',
            'htx': 'HTX - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'huobi': 'Huobi - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –±–∏—Ä–∂–∞ –∞–∫—Ç–∏–≤–æ–≤',
            'hyperliquid': 'Hyperliquid - L1 –±–ª–æ–∫—á–µ–π–Ω –¥–ª—è –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'independentreserve': 'Independent Reserve - –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∞—è/–ù–æ–≤–æ–∑–µ–ª–∞–Ω–¥—Å–∫–∞—è –±–∏—Ä–∂–∞',
            'indodax': 'Indodax - –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'kraken': 'Kraken - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'krakenfutures': 'Kraken Futures - –î–µ—Ä–∏–≤–∞—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Kraken',
            'kucoin': 'KuCoin - "–ù–∞—Ä–æ–¥–Ω–∞—è –±–∏—Ä–∂–∞"',
            'kucoinfutures': 'KuCoin Futures - –§—å—é—á–µ—Ä—Å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ KuCoin',
            'latoken': 'LATOKEN - –ú—É–ª—å—Ç–∏–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'lbank': 'LBank - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'luno': 'Luno - –ë–∏—Ä–∂–∞ –≤ –ê—Ñ—Ä–∏–∫–µ –∏ –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–æ–π –ê–∑–∏–∏',
            'mercado': 'Mercado Bitcoin - –ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'mexc': 'MEXC - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'modetrade': 'Mode Trade - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'myokx': 'MyOKX - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ OKX',
            'ndax': 'NDAX - –ö–∞–Ω–∞–¥—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'novadax': 'NovaDAX - –ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'oceanex': 'OceanEx - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞ VeChain',
            'okcoin': 'OKCoin - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'okx': 'OKX - –í–µ–¥—É—â–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –∏ Web3 –∫–æ–º–ø–∞–Ω–∏—è',
            'okxus': 'OKX US - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ OKX',
            'onetrading': 'One Trading - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'oxfun': 'OXFun - –ë–∏—Ä–∂–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'p2b': 'P2B - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'paradex': 'Paradex - –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞',
            'paymium': 'Paymium - –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –±–∏—Ä–∂–∞ –±–∏—Ç–∫–æ–∏–Ω–æ–≤',
            'phemex': 'Phemex - –ë–∏—Ä–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'poloniex': 'Poloniex - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'probit': 'ProBit - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'timex': 'TimeX - –ì–∏–±—Ä–∏–¥–Ω–∞—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞',
            'tokocrypto': 'Tokocrypto - –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'tradeogre': 'TradeOgre - –ë–∏—Ä–∂–∞ –¥–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤',
            'upbit': 'Upbit - –Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'vertex': 'Vertex - –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤',
            'wavesexchange': 'Waves.Exchange - –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞',
            'whitebit': 'WhiteBIT - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'woo': 'WOO - –ë–∏—Ä–∂–∞ —Å –≥–ª—É–±–æ–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é',
            'woofipro': 'WooFi Pro - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'xt': 'XT.COM - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'yobit': 'YoBit - –†–æ—Å—Å–∏–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'zaif': 'Zaif - –Ø–ø–æ–Ω—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞',
            'zonda': 'Zonda - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞'
        };

        let currentVisibleExchanges = exchangeCategories.top; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–ü-10

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            showExchangeCategory('top');
            updateSelectedExchanges();
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –±–∏—Ä–∂–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        function showExchangeCategory(category) {
            currentVisibleExchanges = exchangeCategories[category] || allExchanges;
            renderExchanges(currentVisibleExchanges);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –ø–æ –ø–æ–∏—Å–∫—É
        function filterExchanges() {
            const searchTerm = document.getElementById('exchangeSearch').value.toLowerCase();
            const filtered = currentVisibleExchanges.filter(exchange => 
                exchange.toLowerCase().includes(searchTerm) || 
                exchangeDescriptions[exchange].toLowerCase().includes(searchTerm)
            );
            renderExchanges(filtered);
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–∏—Ä–∂ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        function renderExchanges(exchanges) {
            const container = document.getElementById('exchangesContainer');
            container.innerHTML = '';

            exchanges.forEach(exchange => {
                const exchangeDiv = document.createElement('div');
                exchangeDiv.className = 'exchange-checkbox';
                exchangeDiv.innerHTML = `
                    <input type="checkbox" id="exchange_${exchange}" value="${exchange}" onchange="updateSelectedExchanges()">
                    <label for="exchange_${exchange}">
                        <strong>${exchange.charAt(0).toUpperCase() + exchange.slice(1)}</strong>
                        <br><small>${exchangeDescriptions[exchange] || exchange}</small>
                    </label>
                `;
                container.appendChild(exchangeDiv);
            });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂
        function updateSelectedExchanges() {
            selectedExchanges = [];
            
            allExchanges.forEach(exchange => {
                const checkbox = document.getElementById(`exchange_${exchange}`);
                if (checkbox && checkbox.checked) {
                    selectedExchanges.push(exchange);
                    checkbox.parentElement.classList.add('selected');
                } else if (checkbox) {
                    checkbox.parentElement.classList.remove('selected');
                }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            const countElement = document.getElementById('selectedCount');
            if (countElement) {
                countElement.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedExchanges.length}`;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∏—Ä–∂
            if (selectedExchanges.length > 0) {
                loadAvailablePairs();
            } else {
                availablePairs = [];
                filteredPairs = [];
                renderDropdown();
            }
        }
        
        // –í—ã–±—Ä–∞—Ç—å –¢–û–ü-5 –±–∏—Ä–∂
        function selectTopExchanges() {
            const topExchanges = ['binance', 'bybit', 'okx', 'coinbase', 'kraken'];
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
            clearAllExchanges();
            
            // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø –±–∏—Ä–∂–∏
            topExchanges.forEach(exchange => {
                const checkbox = document.getElementById(`exchange_${exchange}`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
            
            updateSelectedExchanges();
        }

        // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –±–∏—Ä–∂–∏
        function selectAllVisible() {
            const container = document.getElementById('exchangesContainer');
            const checkboxes = container.querySelectorAll('input[type="checkbox"]');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            
            updateSelectedExchanges();
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –±–∏—Ä–∂
        function clearAllExchanges() {
            allExchanges.forEach(exchange => {
                const checkbox = document.getElementById(`exchange_${exchange}`);
                if (checkbox) {
                    checkbox.checked = false;
                }
            });
            
            updateSelectedExchanges();
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function showAlert(elementId, message, type) {
            const element = document.getElementById(elementId);
            element.innerHTML = `<div class="alert ${type}">${message}</div>`;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            if (type === 'success') {
                setTimeout(() => {
                    element.innerHTML = '';
                }, 10000);
            }
        }

        function showLoading(elementId, show) {
            const element = document.getElementById(elementId);
            element.style.display = show ? 'inline-block' : 'none';
        }
    </script>
</body>
</html>
