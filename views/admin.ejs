<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –ë–æ—Ç–∞</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .nav-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #ddd;
        }

        .nav-tab {
            flex: 1;
            padding: 20px;
            text-align: center;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            color: #666;
            transition: all 0.3s ease;
        }

        .nav-tab.active {
            background: white;
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
        }

        .nav-tab:hover {
            background: #e9ecef;
        }

        .tab-content {
            display: none;
            padding: 40px;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
            font-size: 1rem;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .form-group small {
            display: block;
            margin-top: 5px;
            color: #666;
            font-size: 0.9rem;
        }

        .button {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
        }

        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(52, 152, 219, 0.3);
        }

        .button.secondary {
            background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        }

        .button.success {
            background: linear-gradient(135deg, #27ae60, #229954);
        }

        .button.danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        .pairs-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .pair-checkbox {
            display: flex;
            align-items: center;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .pair-checkbox:hover {
            border-color: #3498db;
            background: #f8f9fa;
        }

        .pair-checkbox.selected {
            border-color: #27ae60;
            background: #d5f4e6;
        }

        .pair-checkbox input {
            margin-right: 8px;
            width: auto;
        }

        .alert {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .alert.success {
            background: #d5f4e6;
            color: #27ae60;
            border: 1px solid #27ae60;
        }

        .alert.error {
            background: #fdf2f2;
            color: #e74c3c;
            border: 1px solid #e74c3c;
        }

        .alert.warning {
            background: #fff5d7;
            color: #f39c12;
            border: 1px solid #f39c12;
        }

        .alert.info {
            background: #e8f4f8;
            color: #3498db;
            border: 1px solid #3498db;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .instructions {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }

        .instructions h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }

        .instructions ol {
            padding-left: 20px;
        }

        .instructions li {
            margin-bottom: 10px;
            line-height: 1.6;
        }

        .instructions a {
            color: #3498db;
            text-decoration: none;
        }

        .instructions a:hover {
            text-decoration: underline;
        }

        .chat-id-finder {
            background: #e8f4f8;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #3498db;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-indicator.green {
            background: #27ae60;
        }

        .status-indicator.red {
            background: #e74c3c;
        }

        .status-indicator.yellow {
            background: #f39c12;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }

            .header {
                padding: 20px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .tab-content {
                padding: 20px;
            }

            .nav-tabs {
                flex-direction: column;
            }

            .pairs-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ë–æ—Ç</h1>
            <p>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('telegram')">üì± Telegram</button>
            <button class="nav-tab" onclick="showTab('exchange')">üè¶ –ë–∏—Ä–∂–∞</button>
            <button class="nav-tab" onclick="showTab('analysis')">üìä –ê–Ω–∞–ª–∏–∑</button>
            <button class="nav-tab" onclick="showTab('status')">‚öôÔ∏è –°—Ç–∞—Ç—É—Å</button>
        </div>

        <form id="configForm">
            <!-- Telegram Tab -->
            <div id="telegram" class="tab-content active">
                <div class="instructions">
                    <h3>üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞</h3>
                    <ol>
                        <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∫ <a href="https://t.me/BotFather" target="_blank">@BotFather</a></li>
                        <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/newbot</code></li>
                        <li>–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ Bot Token</li>
                        <li>–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω"</li>
                        <li>–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–º—É –±–æ—Ç—É</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ Chat ID" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
                    </ol>
                </div>

                <div class="form-group">
                    <label for="telegramBotToken">Bot Token *</label>
                    <input type="text" id="telegramBotToken" name="telegramBotToken" 
                           placeholder="123456789:ABCdefGHijklmnopQRSTuvwxyz" required>
                    <small>–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –æ—Ç @BotFather</small>
                </div>

                <div style="margin-bottom: 20px;">
                    <button type="button" class="button" onclick="validateToken()">
                        <span id="tokenValidationLoading" class="loading" style="display: none;"></span>
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω
                    </button>
                    <div id="tokenValidationResult"></div>
                </div>

                <div class="chat-id-finder">
                    <h3>üîç –ü–æ–∏—Å–∫ Chat ID</h3>
                    <p>–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–º—É –±–æ—Ç—É –≤ Telegram, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
                    <br>
                    <button type="button" class="button success" onclick="findChatId()">
                        <span id="chatIdLoading" class="loading" style="display: none;"></span>
                        –ù–∞–π—Ç–∏ Chat ID
                    </button>
                    <div id="chatIdResult" style="margin-top: 15px;"></div>
                </div>

                <div class="form-group">
                    <label for="telegramChatId">Chat ID *</label>
                    <input type="text" id="telegramChatId" name="telegramChatId" 
                           placeholder="123456789" required>
                    <small>ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</small>
                </div>

                <div style="margin-top: 20px;">
                    <button type="button" class="button success" onclick="sendTestMessage()">
                        <span id="testMessageLoading" class="loading" style="display: none;"></span>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    </button>
                    <div id="testMessageResult"></div>
                </div>
            </div>

            <!-- Exchange Tab -->
            <div id="exchange" class="tab-content">
                <div class="instructions">
                    <h3>üè¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏—Ä–∂–∏ Bybit (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</h3>
                    <ol>
                        <li>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ <a href="https://www.bybit.com" target="_blank">Bybit.com</a></li>
                        <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ API Management</li>
                        <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á</li>
                        <li>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: "Read-Only" (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)</li>
                        <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ API Key –∏ Secret Key</li>
                    </ol>
                    <div class="alert info">
                        <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> API –∫–ª—é—á–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. 
                        –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±–µ–∑ –Ω–∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                    </div>
                </div>

                <div class="form-group">
                    <label for="bybitApiKey">Bybit API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                    <input type="text" id="bybitApiKey" name="bybitApiKey" 
                           placeholder="KozloxFlNJjtCw7pmY">
                    <small>API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –±–∏—Ä–∂–∏</small>
                </div>

                <div class="form-group">
                    <label for="bybitSecretKey">Bybit Secret Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                    <input type="password" id="bybitSecretKey" name="bybitSecretKey" 
                           placeholder="VNjjjTHhOMM6qWJa1emd50X67apN97pYYzYB">
                    <small>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</small>
                </div>
            </div>

            <!-- Analysis Tab -->
            <div id="analysis" class="tab-content">
                <div class="instructions">
                    <h3>üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞</h3>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. 
                       –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 4 —á–∞—Å–∞ –¥–ª—è swing-—Ç–æ—Ä–≥–æ–≤–ª–∏.</p>
                </div>

                <div class="form-group">
                    <label for="analysisInterval">–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ *</label>
                    <select id="analysisInterval" name="analysisInterval" required>
                        <option value="15m">15 –º–∏–Ω—É—Ç</option>
                        <option value="30m">30 –º–∏–Ω—É—Ç</option>
                        <option value="1h">1 —á–∞—Å</option>
                        <option value="2h">2 —á–∞—Å–∞</option>
                        <option value="4h" selected>4 —á–∞—Å–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</option>
                        <option value="6h">6 —á–∞—Å–æ–≤</option>
                        <option value="12h">12 —á–∞—Å–æ–≤</option>
                        <option value="1d">1 –¥–µ–Ω—å</option>
                    </select>
                    <small>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</small>
                </div>

                <div class="form-group">
                    <label>–í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ *</label>
                    <small>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-15 –ø–∞—Ä)</small>
                    <div class="pairs-grid" id="pairsGrid">
                        <!-- –ü–∞—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>

                <div style="margin-top: 20px;">
                    <button type="button" class="button" onclick="selectPopularPairs()">–í—ã–±—Ä–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã</button>
                    <button type="button" class="button secondary" onclick="clearAllPairs()">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
                    <button type="button" class="button secondary" onclick="selectAllPairs()">–í—ã–±—Ä–∞—Ç—å –≤—Å–µ</button>
                </div>
            </div>

            <!-- Status Tab -->
            <div id="status" class="tab-content">
                <div class="instructions">
                    <h3>‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.</p>
                </div>

                <div id="systemStatus">
                    <!-- –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>

                <div style="margin-top: 30px;">
                    <button type="button" class="button" onclick="checkSystemStatus()">
                        <span id="statusLoading" class="loading" style="display: none;"></span>
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                    </button>
                </div>
            </div>
        </form>

        <div style="padding: 30px; text-align: center; border-top: 1px solid #e0e0e0;">
            <button type="button" class="button success" onclick="saveConfiguration()" style="font-size: 1.1rem; padding: 15px 30px;">
                <span id="saveLoading" class="loading" style="display: none;"></span>
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
            <div id="saveResult" style="margin-top: 15px;"></div>
        </div>
    </div>

    <script>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let availablePairs = [];
        let currentConfig = {};

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-tab').forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        document.addEventListener('DOMContentLoaded', async function() {
            await loadConfiguration();
            await loadAvailablePairs();
            renderPairsGrid();
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        async function loadConfiguration() {
            try {
                const response = await fetch('/admin/api/config');
                if (response.ok) {
                    currentConfig = await response.json();
                    fillForm(currentConfig);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            }
        }

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏
        function fillForm(config) {
            document.getElementById('telegramBotToken').value = config.telegramBotToken || '';
            document.getElementById('telegramChatId').value = config.telegramChatId || '';
            document.getElementById('bybitApiKey').value = config.bybitApiKey || '';
            document.getElementById('bybitSecretKey').value = config.bybitSecretKey || '';
            document.getElementById('analysisInterval').value = config.analysisInterval || '4h';
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
        async function loadAvailablePairs() {
            try {
                const response = await fetch('/admin/api/available-pairs');
                if (response.ok) {
                    availablePairs = await response.json();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä:', error);
            }
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
        function renderPairsGrid() {
            const grid = document.getElementById('pairsGrid');
            grid.innerHTML = '';

            availablePairs.forEach(pair => {
                const isSelected = currentConfig.analysisPairs && currentConfig.analysisPairs.includes(pair);
                
                const div = document.createElement('div');
                div.className = `pair-checkbox ${isSelected ? 'selected' : ''}`;
                div.innerHTML = `
                    <input type="checkbox" id="pair_${pair}" ${isSelected ? 'checked' : ''} 
                           onchange="togglePairSelection('${pair}', this.checked)">
                    <label for="pair_${pair}">${pair}</label>
                `;
                grid.appendChild(div);
            });
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        function togglePairSelection(pair, selected) {
            const checkbox = document.getElementById(`pair_${pair}`);
            const container = checkbox.parentElement;
            
            if (selected) {
                container.classList.add('selected');
            } else {
                container.classList.remove('selected');
            }
        }

        // –í—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        function selectPopularPairs() {
            const popularPairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT', 'XRP/USDT', 'DOT/USDT', 'LINK/USDT'];
            
            availablePairs.forEach(pair => {
                const checkbox = document.getElementById(`pair_${pair}`);
                const isPopular = popularPairs.includes(pair);
                checkbox.checked = isPopular;
                togglePairSelection(pair, isPopular);
            });
        }

        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã
        function clearAllPairs() {
            availablePairs.forEach(pair => {
                const checkbox = document.getElementById(`pair_${pair}`);
                checkbox.checked = false;
                togglePairSelection(pair, false);
            });
        }

        // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä—ã
        function selectAllPairs() {
            availablePairs.forEach(pair => {
                const checkbox = document.getElementById(`pair_${pair}`);
                checkbox.checked = true;
                togglePairSelection(pair, true);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        async function validateToken() {
            const token = document.getElementById('telegramBotToken').value;
            if (!token) {
                showAlert('tokenValidationResult', '–í–≤–µ–¥–∏—Ç–µ Bot Token', 'error');
                return;
            }

            showLoading('tokenValidationLoading', true);
            
            try {
                const response = await fetch('/admin/api/validate-token', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token })
                });

                const result = await response.json();
                
                if (result.valid) {
                    showAlert('tokenValidationResult', 
                        `‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç: @${result.botInfo.username} (${result.botInfo.first_name})`, 
                        'success');
                } else {
                    showAlert('tokenValidationResult', `‚ùå ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('tokenValidationResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('tokenValidationLoading', false);
            }
        }

        // –ü–æ–∏—Å–∫ Chat ID
        async function findChatId() {
            const token = document.getElementById('telegramBotToken').value;
            if (!token) {
                showAlert('chatIdResult', '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Bot Token', 'error');
                return;
            }

            showLoading('chatIdLoading', true);
            
            try {
                const response = await fetch('/admin/api/find-chat-id', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token })
                });

                const result = await response.json();
                
                if (result.found) {
                    document.getElementById('telegramChatId').value = result.chatId;
                    showAlert('chatIdResult', 
                        `‚úÖ Chat ID –Ω–∞–π–¥–µ–Ω: ${result.chatId}<br>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.firstName}${result.username ? ' (@' + result.username + ')' : ''}`, 
                        'success');
                } else {
                    showAlert('chatIdResult', `‚ùå ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('chatIdResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('chatIdLoading', false);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async function sendTestMessage() {
            const token = document.getElementById('telegramBotToken').value;
            const chatId = document.getElementById('telegramChatId').value;
            
            if (!token || !chatId) {
                showAlert('testMessageResult', '–í–≤–µ–¥–∏—Ç–µ Bot Token –∏ Chat ID', 'error');
                return;
            }

            showLoading('testMessageLoading', true);
            
            try {
                const response = await fetch('/admin/api/test-message', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token, chatId })
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert('testMessageResult', '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success');
                } else {
                    showAlert('testMessageResult', `‚ùå ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('testMessageResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('testMessageLoading', false);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        async function checkSystemStatus() {
            showLoading('statusLoading', true);
            
            try {
                const response = await fetch('/admin/api/system-status');
                const status = await response.json();
                
                let html = '<div class="alert info"><h3>–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</h3>';
                
                html += `<p><span class="status-indicator ${status.api ? 'green' : 'red'}"></span>API –°–µ—Ä–≤–µ—Ä: ${status.api ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</p>`;
                html += `<p><span class="status-indicator ${status.cache ? 'green' : 'red'}"></span>–ö–µ—à: ${status.cache ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</p>`;
                html += `<p><span class="status-indicator ${status.exchange ? 'green' : 'red'}"></span>–ë–∏—Ä–∂–∞: ${status.exchange ? '–î–æ—Å—Ç—É–ø–Ω–∞' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}</p>`;
                html += `<p><span class="status-indicator ${status.python ? 'green' : 'yellow'}"></span>Python —Å–µ—Ä–≤–∏—Å: ${status.python ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'}</p>`;
                
                html += '</div>';
                
                document.getElementById('systemStatus').innerHTML = html;
            } catch (error) {
                showAlert('systemStatus', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`, 'error');
            } finally {
                showLoading('statusLoading', false);
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        async function saveConfiguration() {
            const config = {
                telegramBotToken: document.getElementById('telegramBotToken').value,
                telegramChatId: document.getElementById('telegramChatId').value,
                bybitApiKey: document.getElementById('bybitApiKey').value,
                bybitSecretKey: document.getElementById('bybitSecretKey').value,
                analysisInterval: document.getElementById('analysisInterval').value,
                analysisPairs: []
            };

            // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            availablePairs.forEach(pair => {
                const checkbox = document.getElementById(`pair_${pair}`);
                if (checkbox.checked) {
                    config.analysisPairs.push(pair);
                }
            });

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!config.telegramBotToken) {
                showAlert('saveResult', 'Bot Token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'error');
                showTab('telegram');
                return;
            }

            if (!config.telegramChatId) {
                showAlert('saveResult', 'Chat ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'error');
                showTab('telegram');
                return;
            }

            if (config.analysisPairs.length === 0) {
                showAlert('saveResult', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É', 'error');
                showTab('analysis');
                return;
            }

            showLoading('saveLoading', true);
            
            try {
                const response = await fetch('/admin/api/config', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(config)
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert('saveResult', '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
                    currentConfig = config;
                } else {
                    showAlert('saveResult', `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${result.error}`, 'error');
                }
            } catch (error) {
                showAlert('saveResult', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                showLoading('saveLoading', false);
            }
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function showAlert(elementId, message, type) {
            const element = document.getElementById(elementId);
            element.innerHTML = `<div class="alert ${type}">${message}</div>`;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            if (type === 'success') {
                setTimeout(() => {
                    element.innerHTML = '';
                }, 10000);
            }
        }

        function showLoading(elementId, show) {
            const element = document.getElementById(elementId);
            element.style.display = show ? 'inline-block' : 'none';
        }
    </script>
</body>
</html>
