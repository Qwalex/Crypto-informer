// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ API-–∫–ª—é—á–µ–π
const { ExchangeService } = require('./dist/services/ExchangeService.js');
const { ConfigService } = require('./dist/services/ConfigService.js');

async function testNoApiKeys() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ API-–∫–ª—é—á–µ–π...\n');

    try {
        // –¢–µ—Å—Ç 1: ExchangeService
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExchangeService...');
        const exchangeService = new ExchangeService();
        
        const supportedExchanges = await exchangeService.getSupportedExchanges(['binance', 'bybit']);
        console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏:', supportedExchanges.slice(0, 3));
        
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ API –∫–ª—é—á–µ–π
        const ticker = await exchangeService.getTicker('binance', 'BTC/USDT');
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–∏–∫–µ—Ä BTC/USDT:', { symbol: ticker.symbol, last: ticker.last });
        
        // –¢–µ—Å—Ç 2: ConfigService
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigService...');
        const configService = new ConfigService();
        
        const config = configService.loadConfiguration();
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:');
        console.log('   - Telegram Bot Token:', config.telegramBotToken ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        console.log('   - Selected Exchanges:', config.selectedExchanges || ['binance', 'bybit']);
        console.log('   - Analysis Pairs:', config.analysisPairs?.length || 0);
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ API –∫–ª—é—á–µ–π
        const testConfig = {
            telegramBotToken: 'test_token',
            telegramChatId: '12345',
            selectedExchanges: ['binance', 'bybit'],
            analysisInterval: '4h',
            analysisPairs: ['BTC/USDT', 'ETH/USDT']
        };
        
        const validation = configService.validateConfiguration(testConfig);
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', validation.isValid ? '–ü—Ä–æ—à–ª–∞' : '–ü—Ä–æ–≤–∞–ª–µ–Ω–∞');
        
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –±–µ–∑ API-–∫–ª—é—á–µ–π');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        process.exit(1);
    }
}

testNoApiKeys();
