// –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏ –±–µ–∑ API –∫–ª—é—á–µ–π
const { loadConfig } = require('./dist/utils/config');
const { ExchangeService } = require('./dist/services/ExchangeService');

async function testMultiExchange() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏...\n');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = loadConfig();
    console.log('üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏:', config.selectedExchanges);
    
    // –°–æ–∑–¥–∞–µ–º ExchangeService —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–∏—Ä–∂–∞–º–∏
    const exchangeService = new ExchangeService(config.selectedExchanges);
    
    console.log('\nüè¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ä–∂–∏:');
    const availableExchanges = exchangeService.getAvailableExchanges();
    availableExchanges.forEach(exchange => {
      console.log(`  ‚úÖ ${exchange.toUpperCase()}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
    const testPair = 'BTC/USDT';
    console.log(`\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã ${testPair} —Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏:`);
    
    for (const exchangeName of availableExchanges) {
      try {
        console.log(`\nüîç –ë–∏—Ä–∂–∞: ${exchangeName.toUpperCase()}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        const price = await exchangeService.getCurrentPrice(testPair, exchangeName);
        console.log(`  üí≤ –¶–µ–Ω–∞: $${price.toFixed(2)}`);
        
        // –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        const ohlcv = await exchangeService.fetchOHLCVData(testPair, '1h', 5, exchangeName);
        console.log(`  üìä OHLCV –¥–∞–Ω–Ω—ã—Ö: ${ohlcv.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (ohlcv.length > 0) {
          const lastCandle = ohlcv[ohlcv.length - 1];
          console.log(`  üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: O:${lastCandle.open.toFixed(2)} H:${lastCandle.high.toFixed(2)} L:${lastCandle.low.toFixed(2)} C:${lastCandle.close.toFixed(2)}`);
        }
        
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –±–∏—Ä–∂–µ ${exchangeName}:`, error.message);
      }
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testMultiExchange();
